<?php
/**
 * HDWalletDataEVMApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MitinSany/CryptoapisApiClient\ApiException;
use MitinSany/CryptoapisApiClient\Configuration;
use MitinSany/CryptoapisApiClient\FormDataProcessor;
use MitinSany/CryptoapisApiClient\HeaderSelector;
use MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * HDWalletDataEVMApi Class Doc Comment
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HDWalletDataEVMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deriveAndSyncNewReceivingAddressesEVM' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubAssetsEVM' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubDetailsEVM' => [
            'application/json',
        ],
        'listHDWalletXPubYPubZPubTransactionsEVM' => [
            'application/json',
        ],
        'listSyncedAddressesEVM' => [
            'application/json',
        ],
        'prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesEVM
     *
     * Derive And Sync New Receiving Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMRB|null $deriveAndSyncNewReceivingAddressesEVMRB deriveAndSyncNewReceivingAddressesEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM400Response|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function deriveAndSyncNewReceivingAddressesEVM($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesEVMRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'][0])
    {
        list($response) = $this->deriveAndSyncNewReceivingAddressesEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesEVMRB, $contentType);
        return $response;
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesEVMWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMRB|null $deriveAndSyncNewReceivingAddressesEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM400Response|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deriveAndSyncNewReceivingAddressesEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesEVMRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'][0])
    {
        $request = $this->deriveAndSyncNewReceivingAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesEVMRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesEVMAsync
     *
     * Derive And Sync New Receiving Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMRB|null $deriveAndSyncNewReceivingAddressesEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesEVMAsync($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesEVMRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'][0])
    {
        return $this->deriveAndSyncNewReceivingAddressesEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesEVMRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesEVMAsyncWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMRB|null $deriveAndSyncNewReceivingAddressesEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesEVMRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMR';
        $request = $this->deriveAndSyncNewReceivingAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesEVMRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deriveAndSyncNewReceivingAddressesEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesEVMRB|null $deriveAndSyncNewReceivingAddressesEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deriveAndSyncNewReceivingAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesEVMRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling deriveAndSyncNewReceivingAddressesEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling deriveAndSyncNewReceivingAddressesEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling deriveAndSyncNewReceivingAddressesEVM'
            );
        }




        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/addresses/derive-and-sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deriveAndSyncNewReceivingAddressesEVMRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deriveAndSyncNewReceivingAddressesEVMRB));
            } else {
                $httpBody = $deriveAndSyncNewReceivingAddressesEVMRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsEVM
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubAssetsEVM($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubAssetsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsEVMWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubAssetsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubAssetsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVM422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsEVMAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsEVMAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'][0])
    {
        return $this->getHDWalletXPubYPubZPubAssetsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsEVMAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsEVMR';
        $request = $this->getHDWalletXPubYPubZPubAssetsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubAssetsEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubAssetsEVMRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubAssetsEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubAssetsEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubAssetsEVM'
            );
        }




        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsEVM
     *
     * Get HD Wallet (xPub, yPub, zPub) Details EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubDetailsEVM($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubDetailsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsEVMWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubDetailsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubDetailsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVM422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsEVMAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Details EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsEVMAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'][0])
    {
        return $this->getHDWalletXPubYPubZPubDetailsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsEVMAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsEVMR';
        $request = $this->getHDWalletXPubYPubZPubDetailsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubDetailsEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubDetailsEVMRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubDetailsEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubDetailsEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubDetailsEVM'
            );
        }




        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsEVM
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions EVM
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM400Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listHDWalletXPubYPubZPubTransactionsEVM($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'][0])
    {
        list($response) = $this->listHDWalletXPubYPubZPubTransactionsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsEVMWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions EVM
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM400Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHDWalletXPubYPubZPubTransactionsEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'][0])
    {
        $request = $this->listHDWalletXPubYPubZPubTransactionsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVM422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsEVMAsync
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions EVM
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsEVMAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'][0])
    {
        return $this->listHDWalletXPubYPubZPubTransactionsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsEVMAsyncWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions EVM
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsEVMR';
        $request = $this->listHDWalletXPubYPubZPubTransactionsEVMRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHDWalletXPubYPubZPubTransactionsEVM'
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listHDWalletXPubYPubZPubTransactionsEVMRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listHDWalletXPubYPubZPubTransactionsEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listHDWalletXPubYPubZPubTransactionsEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listHDWalletXPubYPubZPubTransactionsEVM'
            );
        }






        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSyncedAddressesEVM
     *
     * List Synced Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM400Response|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listSyncedAddressesEVM($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesEVM'][0])
    {
        list($response) = $this->listSyncedAddressesEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listSyncedAddressesEVMWithHttpInfo
     *
     * List Synced Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM400Response|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSyncedAddressesEVMWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesEVM'][0])
    {
        $request = $this->listSyncedAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSyncedAddressesEVMAsync
     *
     * List Synced Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesEVMAsync($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesEVM'][0])
    {
        return $this->listSyncedAddressesEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSyncedAddressesEVMAsyncWithHttpInfo
     *
     * List Synced Addresses EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesEVMAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\ListSyncedAddressesEVMR';
        $request = $this->listSyncedAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSyncedAddressesEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSyncedAddressesEVMRequest($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listSyncedAddressesEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listSyncedAddressesEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listSyncedAddressesEVM'
            );
        }







        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $addressFormat,
            'addressFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isChangeAddress,
            'isChangeAddress', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM
     *
     * Prepare A Transaction From an Address in HD Wallet (xPub, yPub, zPub) EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $type Enum representation of the transaction type (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB|null $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM400Response|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM($blockchain, $network, $extendedPublicKey, $type, $context = null, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB = null, string $contentType = self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'][0])
    {
        list($response) = $this->prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMWithHttpInfo($blockchain, $network, $extendedPublicKey, $type, $context, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB, $contentType);
        return $response;
    }

    /**
     * Operation prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMWithHttpInfo
     *
     * Prepare A Transaction From an Address in HD Wallet (xPub, yPub, zPub) EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $type Enum representation of the transaction type (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB|null $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM400Response|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMWithHttpInfo($blockchain, $network, $extendedPublicKey, $type, $context = null, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB = null, string $contentType = self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'][0])
    {
        $request = $this->prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRequest($blockchain, $network, $extendedPublicKey, $type, $context, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMAsync
     *
     * Prepare A Transaction From an Address in HD Wallet (xPub, yPub, zPub) EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $type Enum representation of the transaction type (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB|null $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMAsync($blockchain, $network, $extendedPublicKey, $type, $context = null, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB = null, string $contentType = self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'][0])
    {
        return $this->prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMAsyncWithHttpInfo($blockchain, $network, $extendedPublicKey, $type, $context, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMAsyncWithHttpInfo
     *
     * Prepare A Transaction From an Address in HD Wallet (xPub, yPub, zPub) EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $type Enum representation of the transaction type (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB|null $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMAsyncWithHttpInfo($blockchain, $network, $extendedPublicKey, $type, $context = null, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB = null, string $contentType = self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMR';
        $request = $this->prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRequest($blockchain, $network, $extendedPublicKey, $type, $context, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $type Enum representation of the transaction type (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB|null $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRequest($blockchain, $network, $extendedPublicKey, $type, $context = null, $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB = null, string $contentType = self::contentTypes['prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVM'
            );
        }




        $resourcePath = '/hd-wallets/evm/{blockchain}/{network}/{extendedPublicKey}/transactions/prepare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB));
            } else {
                $httpBody = $prepareATransactionFromAnAddressInHDWalletXPubYPubZPubEVMRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
