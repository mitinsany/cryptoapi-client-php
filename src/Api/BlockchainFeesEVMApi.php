<?php
/**
 * BlockchainFeesEVMApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MitinSany/CryptoapisApiClient\ApiException;
use MitinSany/CryptoapisApiClient\Configuration;
use MitinSany/CryptoapisApiClient\FormDataProcessor;
use MitinSany/CryptoapisApiClient\HeaderSelector;
use MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * BlockchainFeesEVMApi Class Doc Comment
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BlockchainFeesEVMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'estimateNativeCoinTransferGasLimitEVM' => [
            'application/json',
        ],
        'estimateTokenTransferGasLimitEVM' => [
            'application/json',
        ],
        'getEIP1559FeeRecommendationsEVM' => [
            'application/json',
        ],
        'getFeeRecommendationsEVM' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation estimateNativeCoinTransferGasLimitEVM
     *
     * Estimate Native Coin Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMRB|null $estimateNativeCoinTransferGasLimitEVMRB estimateNativeCoinTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateNativeCoinTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM400Response|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function estimateNativeCoinTransferGasLimitEVM($blockchain, $network, $context = null, $estimateNativeCoinTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateNativeCoinTransferGasLimitEVM'][0])
    {
        list($response) = $this->estimateNativeCoinTransferGasLimitEVMWithHttpInfo($blockchain, $network, $context, $estimateNativeCoinTransferGasLimitEVMRB, $contentType);
        return $response;
    }

    /**
     * Operation estimateNativeCoinTransferGasLimitEVMWithHttpInfo
     *
     * Estimate Native Coin Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMRB|null $estimateNativeCoinTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateNativeCoinTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM400Response|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateNativeCoinTransferGasLimitEVMWithHttpInfo($blockchain, $network, $context = null, $estimateNativeCoinTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateNativeCoinTransferGasLimitEVM'][0])
    {
        $request = $this->estimateNativeCoinTransferGasLimitEVMRequest($blockchain, $network, $context, $estimateNativeCoinTransferGasLimitEVMRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM403Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation estimateNativeCoinTransferGasLimitEVMAsync
     *
     * Estimate Native Coin Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMRB|null $estimateNativeCoinTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateNativeCoinTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateNativeCoinTransferGasLimitEVMAsync($blockchain, $network, $context = null, $estimateNativeCoinTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateNativeCoinTransferGasLimitEVM'][0])
    {
        return $this->estimateNativeCoinTransferGasLimitEVMAsyncWithHttpInfo($blockchain, $network, $context, $estimateNativeCoinTransferGasLimitEVMRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateNativeCoinTransferGasLimitEVMAsyncWithHttpInfo
     *
     * Estimate Native Coin Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMRB|null $estimateNativeCoinTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateNativeCoinTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateNativeCoinTransferGasLimitEVMAsyncWithHttpInfo($blockchain, $network, $context = null, $estimateNativeCoinTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateNativeCoinTransferGasLimitEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMR';
        $request = $this->estimateNativeCoinTransferGasLimitEVMRequest($blockchain, $network, $context, $estimateNativeCoinTransferGasLimitEVMRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateNativeCoinTransferGasLimitEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateNativeCoinTransferGasLimitEVMRB|null $estimateNativeCoinTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateNativeCoinTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function estimateNativeCoinTransferGasLimitEVMRequest($blockchain, $network, $context = null, $estimateNativeCoinTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateNativeCoinTransferGasLimitEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling estimateNativeCoinTransferGasLimitEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling estimateNativeCoinTransferGasLimitEVM'
            );
        }




        $resourcePath = '/blockchain-fees/evm/{blockchain}/{network}/estimate-native-coin-transfer-gas-limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($estimateNativeCoinTransferGasLimitEVMRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($estimateNativeCoinTransferGasLimitEVMRB));
            } else {
                $httpBody = $estimateNativeCoinTransferGasLimitEVMRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation estimateTokenTransferGasLimitEVM
     *
     * Estimate Token Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMRB|null $estimateTokenTransferGasLimitEVMRB estimateTokenTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateTokenTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM400Response|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function estimateTokenTransferGasLimitEVM($blockchain, $network, $context = null, $estimateTokenTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateTokenTransferGasLimitEVM'][0])
    {
        list($response) = $this->estimateTokenTransferGasLimitEVMWithHttpInfo($blockchain, $network, $context, $estimateTokenTransferGasLimitEVMRB, $contentType);
        return $response;
    }

    /**
     * Operation estimateTokenTransferGasLimitEVMWithHttpInfo
     *
     * Estimate Token Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMRB|null $estimateTokenTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateTokenTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM400Response|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateTokenTransferGasLimitEVMWithHttpInfo($blockchain, $network, $context = null, $estimateTokenTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateTokenTransferGasLimitEVM'][0])
    {
        $request = $this->estimateTokenTransferGasLimitEVMRequest($blockchain, $network, $context, $estimateTokenTransferGasLimitEVMRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation estimateTokenTransferGasLimitEVMAsync
     *
     * Estimate Token Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMRB|null $estimateTokenTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateTokenTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateTokenTransferGasLimitEVMAsync($blockchain, $network, $context = null, $estimateTokenTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateTokenTransferGasLimitEVM'][0])
    {
        return $this->estimateTokenTransferGasLimitEVMAsyncWithHttpInfo($blockchain, $network, $context, $estimateTokenTransferGasLimitEVMRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateTokenTransferGasLimitEVMAsyncWithHttpInfo
     *
     * Estimate Token Transfer Gas Limit EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMRB|null $estimateTokenTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateTokenTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateTokenTransferGasLimitEVMAsyncWithHttpInfo($blockchain, $network, $context = null, $estimateTokenTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateTokenTransferGasLimitEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMR';
        $request = $this->estimateTokenTransferGasLimitEVMRequest($blockchain, $network, $context, $estimateTokenTransferGasLimitEVMRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateTokenTransferGasLimitEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\EstimateTokenTransferGasLimitEVMRB|null $estimateTokenTransferGasLimitEVMRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateTokenTransferGasLimitEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function estimateTokenTransferGasLimitEVMRequest($blockchain, $network, $context = null, $estimateTokenTransferGasLimitEVMRB = null, string $contentType = self::contentTypes['estimateTokenTransferGasLimitEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling estimateTokenTransferGasLimitEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling estimateTokenTransferGasLimitEVM'
            );
        }




        $resourcePath = '/blockchain-fees/evm/{blockchain}/{network}/estimate-token-transfer-gas-limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($estimateTokenTransferGasLimitEVMRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($estimateTokenTransferGasLimitEVMRB));
            } else {
                $httpBody = $estimateTokenTransferGasLimitEVMRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEIP1559FeeRecommendationsEVM
     *
     * Get EIP 1559 Fee Recommendations EVM
     *
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIP1559FeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getEIP1559FeeRecommendationsEVM($network, $blockchain, $context = null, string $contentType = self::contentTypes['getEIP1559FeeRecommendationsEVM'][0])
    {
        list($response) = $this->getEIP1559FeeRecommendationsEVMWithHttpInfo($network, $blockchain, $context, $contentType);
        return $response;
    }

    /**
     * Operation getEIP1559FeeRecommendationsEVMWithHttpInfo
     *
     * Get EIP 1559 Fee Recommendations EVM
     *
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIP1559FeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEIP1559FeeRecommendationsEVMWithHttpInfo($network, $blockchain, $context = null, string $contentType = self::contentTypes['getEIP1559FeeRecommendationsEVM'][0])
    {
        $request = $this->getEIP1559FeeRecommendationsEVMRequest($network, $blockchain, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM403Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEIP1559FeeRecommendationsEVMAsync
     *
     * Get EIP 1559 Fee Recommendations EVM
     *
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIP1559FeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEIP1559FeeRecommendationsEVMAsync($network, $blockchain, $context = null, string $contentType = self::contentTypes['getEIP1559FeeRecommendationsEVM'][0])
    {
        return $this->getEIP1559FeeRecommendationsEVMAsyncWithHttpInfo($network, $blockchain, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEIP1559FeeRecommendationsEVMAsyncWithHttpInfo
     *
     * Get EIP 1559 Fee Recommendations EVM
     *
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIP1559FeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEIP1559FeeRecommendationsEVMAsyncWithHttpInfo($network, $blockchain, $context = null, string $contentType = self::contentTypes['getEIP1559FeeRecommendationsEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\GetEIP1559FeeRecommendationsEVMR';
        $request = $this->getEIP1559FeeRecommendationsEVMRequest($network, $blockchain, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEIP1559FeeRecommendationsEVM'
     *
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIP1559FeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEIP1559FeeRecommendationsEVMRequest($network, $blockchain, $context = null, string $contentType = self::contentTypes['getEIP1559FeeRecommendationsEVM'][0])
    {

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getEIP1559FeeRecommendationsEVM'
            );
        }

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getEIP1559FeeRecommendationsEVM'
            );
        }



        $resourcePath = '/blockchain-fees/evm/{blockchain}/{network}/eip-1559';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFeeRecommendationsEVM
     *
     * Get Fee Recommendations EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $network Represents the name of the blockchain network used (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getFeeRecommendationsEVM($blockchain, $network, $context = null, string $contentType = self::contentTypes['getFeeRecommendationsEVM'][0])
    {
        list($response) = $this->getFeeRecommendationsEVMWithHttpInfo($blockchain, $network, $context, $contentType);
        return $response;
    }

    /**
     * Operation getFeeRecommendationsEVMWithHttpInfo
     *
     * Get Fee Recommendations EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $network Represents the name of the blockchain network used (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM400Response|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM403Response|\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeeRecommendationsEVMWithHttpInfo($blockchain, $network, $context = null, string $contentType = self::contentTypes['getFeeRecommendationsEVM'][0])
    {
        $request = $this->getFeeRecommendationsEVMRequest($blockchain, $network, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM403Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetTransactionDetailsByTransactionHashXRP404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFeeRecommendationsEVMAsync
     *
     * Get Fee Recommendations EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $network Represents the name of the blockchain network used (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeeRecommendationsEVMAsync($blockchain, $network, $context = null, string $contentType = self::contentTypes['getFeeRecommendationsEVM'][0])
    {
        return $this->getFeeRecommendationsEVMAsyncWithHttpInfo($blockchain, $network, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeeRecommendationsEVMAsyncWithHttpInfo
     *
     * Get Fee Recommendations EVM
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $network Represents the name of the blockchain network used (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeeRecommendationsEVMAsyncWithHttpInfo($blockchain, $network, $context = null, string $contentType = self::contentTypes['getFeeRecommendationsEVM'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\GetFeeRecommendationsEVMR';
        $request = $this->getFeeRecommendationsEVMRequest($blockchain, $network, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeeRecommendationsEVM'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $network Represents the name of the blockchain network used (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeeRecommendationsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFeeRecommendationsEVMRequest($blockchain, $network, $context = null, string $contentType = self::contentTypes['getFeeRecommendationsEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getFeeRecommendationsEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getFeeRecommendationsEVM'
            );
        }



        $resourcePath = '/blockchain-fees/evm/{blockchain}/{network}/mempool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
