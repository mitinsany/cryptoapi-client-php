<?php
/**
 * CreateSubscriptionsForApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MitinSany/CryptoapisApiClient\ApiException;
use MitinSany/CryptoapisApiClient\Configuration;
use MitinSany/CryptoapisApiClient\FormDataProcessor;
use MitinSany/CryptoapisApiClient\HeaderSelector;
use MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * CreateSubscriptionsForApi Class Doc Comment
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreateSubscriptionsForApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'minedTransaction' => [
            'application/json',
        ],
        'newBlock' => [
            'application/json',
        ],
        'newConfirmedCoinsTransactions' => [
            'application/json',
        ],
        'newConfirmedCoinsTransactionsAndEachConfirmation' => [
            'application/json',
        ],
        'newConfirmedInternalTransactions' => [
            'application/json',
        ],
        'newConfirmedInternalTransactionsAndEachConfirmation' => [
            'application/json',
        ],
        'newConfirmedTokensTransactions' => [
            'application/json',
        ],
        'newConfirmedTokensTransactionsAndEachConfirmation' => [
            'application/json',
        ],
        'newUnconfirmedCoinsTransactions' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation minedTransaction
     *
     * Mined Transaction
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\MinedTransactionRB|null $minedTransactionRB minedTransactionRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minedTransaction'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\MinedTransactionR|\MitinSany/CryptoapisApiClient\Model\MinedTransaction400Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction403Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function minedTransaction($blockchain, $network, $context = null, $minedTransactionRB = null, string $contentType = self::contentTypes['minedTransaction'][0])
    {
        list($response) = $this->minedTransactionWithHttpInfo($blockchain, $network, $context, $minedTransactionRB, $contentType);
        return $response;
    }

    /**
     * Operation minedTransactionWithHttpInfo
     *
     * Mined Transaction
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\MinedTransactionRB|null $minedTransactionRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minedTransaction'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\MinedTransactionR|\MitinSany/CryptoapisApiClient\Model\MinedTransaction400Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction403Response|\MitinSany/CryptoapisApiClient\Model\MinedTransaction409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function minedTransactionWithHttpInfo($blockchain, $network, $context = null, $minedTransactionRB = null, string $contentType = self::contentTypes['minedTransaction'][0])
    {
        $request = $this->minedTransactionRequest($blockchain, $network, $context, $minedTransactionRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransactionR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\MinedTransactionR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransactionR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\MinedTransaction409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation minedTransactionAsync
     *
     * Mined Transaction
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\MinedTransactionRB|null $minedTransactionRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minedTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function minedTransactionAsync($blockchain, $network, $context = null, $minedTransactionRB = null, string $contentType = self::contentTypes['minedTransaction'][0])
    {
        return $this->minedTransactionAsyncWithHttpInfo($blockchain, $network, $context, $minedTransactionRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation minedTransactionAsyncWithHttpInfo
     *
     * Mined Transaction
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\MinedTransactionRB|null $minedTransactionRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minedTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function minedTransactionAsyncWithHttpInfo($blockchain, $network, $context = null, $minedTransactionRB = null, string $contentType = self::contentTypes['minedTransaction'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\MinedTransactionR';
        $request = $this->minedTransactionRequest($blockchain, $network, $context, $minedTransactionRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'minedTransaction'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\MinedTransactionRB|null $minedTransactionRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minedTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function minedTransactionRequest($blockchain, $network, $context = null, $minedTransactionRB = null, string $contentType = self::contentTypes['minedTransaction'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling minedTransaction'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling minedTransaction'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/transaction-mined';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($minedTransactionRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($minedTransactionRB));
            } else {
                $httpBody = $minedTransactionRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newBlock
     *
     * New Block
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewBlockRB|null $newBlockRB newBlockRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newBlock'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewBlockR|\MitinSany/CryptoapisApiClient\Model\NewBlock400Response|\MitinSany/CryptoapisApiClient\Model\NewBlock401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewBlock403Response|\MitinSany/CryptoapisApiClient\Model\NewBlock409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newBlock($blockchain, $network, $context = null, $newBlockRB = null, string $contentType = self::contentTypes['newBlock'][0])
    {
        list($response) = $this->newBlockWithHttpInfo($blockchain, $network, $context, $newBlockRB, $contentType);
        return $response;
    }

    /**
     * Operation newBlockWithHttpInfo
     *
     * New Block
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewBlockRB|null $newBlockRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newBlock'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewBlockR|\MitinSany/CryptoapisApiClient\Model\NewBlock400Response|\MitinSany/CryptoapisApiClient\Model\NewBlock401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewBlock403Response|\MitinSany/CryptoapisApiClient\Model\NewBlock409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newBlockWithHttpInfo($blockchain, $network, $context = null, $newBlockRB = null, string $contentType = self::contentTypes['newBlock'][0])
    {
        $request = $this->newBlockRequest($blockchain, $network, $context, $newBlockRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewBlockR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewBlockR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewBlockR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewBlock409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newBlockAsync
     *
     * New Block
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewBlockRB|null $newBlockRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newBlock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newBlockAsync($blockchain, $network, $context = null, $newBlockRB = null, string $contentType = self::contentTypes['newBlock'][0])
    {
        return $this->newBlockAsyncWithHttpInfo($blockchain, $network, $context, $newBlockRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newBlockAsyncWithHttpInfo
     *
     * New Block
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewBlockRB|null $newBlockRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newBlock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newBlockAsyncWithHttpInfo($blockchain, $network, $context = null, $newBlockRB = null, string $contentType = self::contentTypes['newBlock'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewBlockR';
        $request = $this->newBlockRequest($blockchain, $network, $context, $newBlockRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newBlock'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewBlockRB|null $newBlockRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newBlock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newBlockRequest($blockchain, $network, $context = null, $newBlockRB = null, string $contentType = self::contentTypes['newBlock'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newBlock'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newBlock'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/block-mined';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newBlockRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newBlockRB));
            } else {
                $httpBody = $newBlockRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedCoinsTransactions
     *
     * New Confirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsRB|null $newConfirmedCoinsTransactionsRB newConfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedCoinsTransactions($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactions'][0])
    {
        list($response) = $this->newConfirmedCoinsTransactionsWithHttpInfo($blockchain, $network, $context, $newConfirmedCoinsTransactionsRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedCoinsTransactionsWithHttpInfo
     *
     * New Confirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsRB|null $newConfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedCoinsTransactionsWithHttpInfo($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactions'][0])
    {
        $request = $this->newConfirmedCoinsTransactionsRequest($blockchain, $network, $context, $newConfirmedCoinsTransactionsRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactions409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedCoinsTransactionsAsync
     *
     * New Confirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsRB|null $newConfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedCoinsTransactionsAsync($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactions'][0])
    {
        return $this->newConfirmedCoinsTransactionsAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedCoinsTransactionsRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedCoinsTransactionsAsyncWithHttpInfo
     *
     * New Confirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsRB|null $newConfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedCoinsTransactionsAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactions'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsR';
        $request = $this->newConfirmedCoinsTransactionsRequest($blockchain, $network, $context, $newConfirmedCoinsTransactionsRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedCoinsTransactions'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsRB|null $newConfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedCoinsTransactionsRequest($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactions'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedCoinsTransactions'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedCoinsTransactions'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-coins-transactions-confirmed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedCoinsTransactionsRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedCoinsTransactionsRB));
            } else {
                $httpBody = $newConfirmedCoinsTransactionsRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedCoinsTransactionsAndEachConfirmation
     *
     * New Confirmed Coins Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationRB|null $newConfirmedCoinsTransactionsAndEachConfirmationRB newConfirmedCoinsTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedCoinsTransactionsAndEachConfirmation($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'][0])
    {
        list($response) = $this->newConfirmedCoinsTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context, $newConfirmedCoinsTransactionsAndEachConfirmationRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedCoinsTransactionsAndEachConfirmationWithHttpInfo
     *
     * New Confirmed Coins Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationRB|null $newConfirmedCoinsTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedCoinsTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'][0])
    {
        $request = $this->newConfirmedCoinsTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedCoinsTransactionsAndEachConfirmationRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmation409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedCoinsTransactionsAndEachConfirmationAsync
     *
     * New Confirmed Coins Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationRB|null $newConfirmedCoinsTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedCoinsTransactionsAndEachConfirmationAsync($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'][0])
    {
        return $this->newConfirmedCoinsTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedCoinsTransactionsAndEachConfirmationRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedCoinsTransactionsAndEachConfirmationAsyncWithHttpInfo
     *
     * New Confirmed Coins Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationRB|null $newConfirmedCoinsTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedCoinsTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationR';
        $request = $this->newConfirmedCoinsTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedCoinsTransactionsAndEachConfirmationRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedCoinsTransactionsAndEachConfirmation'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedCoinsTransactionsAndEachConfirmationRB|null $newConfirmedCoinsTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedCoinsTransactionsAndEachConfirmationRequest($blockchain, $network, $context = null, $newConfirmedCoinsTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedCoinsTransactionsAndEachConfirmation'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedCoinsTransactionsAndEachConfirmation'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedCoinsTransactionsAndEachConfirmation'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-coins-transactions-confirmed-each-confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedCoinsTransactionsAndEachConfirmationRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedCoinsTransactionsAndEachConfirmationRB));
            } else {
                $httpBody = $newConfirmedCoinsTransactionsAndEachConfirmationRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedInternalTransactions
     *
     * New Confirmed Internal Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsRB|null $newConfirmedInternalTransactionsRB newConfirmedInternalTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedInternalTransactions($blockchain, $network, $context = null, $newConfirmedInternalTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactions'][0])
    {
        list($response) = $this->newConfirmedInternalTransactionsWithHttpInfo($blockchain, $network, $context, $newConfirmedInternalTransactionsRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedInternalTransactionsWithHttpInfo
     *
     * New Confirmed Internal Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsRB|null $newConfirmedInternalTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedInternalTransactionsWithHttpInfo($blockchain, $network, $context = null, $newConfirmedInternalTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactions'][0])
    {
        $request = $this->newConfirmedInternalTransactionsRequest($blockchain, $network, $context, $newConfirmedInternalTransactionsRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactions409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedInternalTransactionsAsync
     *
     * New Confirmed Internal Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsRB|null $newConfirmedInternalTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedInternalTransactionsAsync($blockchain, $network, $context = null, $newConfirmedInternalTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactions'][0])
    {
        return $this->newConfirmedInternalTransactionsAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedInternalTransactionsRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedInternalTransactionsAsyncWithHttpInfo
     *
     * New Confirmed Internal Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsRB|null $newConfirmedInternalTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedInternalTransactionsAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedInternalTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactions'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsR';
        $request = $this->newConfirmedInternalTransactionsRequest($blockchain, $network, $context, $newConfirmedInternalTransactionsRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedInternalTransactions'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsRB|null $newConfirmedInternalTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedInternalTransactionsRequest($blockchain, $network, $context = null, $newConfirmedInternalTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactions'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedInternalTransactions'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedInternalTransactions'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-internal-transactions-confirmed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedInternalTransactionsRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedInternalTransactionsRB));
            } else {
                $httpBody = $newConfirmedInternalTransactionsRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedInternalTransactionsAndEachConfirmation
     *
     * New Confirmed Internal Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationRB|null $newConfirmedInternalTransactionsAndEachConfirmationRB newConfirmedInternalTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedInternalTransactionsAndEachConfirmation($blockchain, $network, $context = null, $newConfirmedInternalTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'][0])
    {
        list($response) = $this->newConfirmedInternalTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context, $newConfirmedInternalTransactionsAndEachConfirmationRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedInternalTransactionsAndEachConfirmationWithHttpInfo
     *
     * New Confirmed Internal Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationRB|null $newConfirmedInternalTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedInternalTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context = null, $newConfirmedInternalTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'][0])
    {
        $request = $this->newConfirmedInternalTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedInternalTransactionsAndEachConfirmationRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmation409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedInternalTransactionsAndEachConfirmationAsync
     *
     * New Confirmed Internal Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationRB|null $newConfirmedInternalTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedInternalTransactionsAndEachConfirmationAsync($blockchain, $network, $context = null, $newConfirmedInternalTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'][0])
    {
        return $this->newConfirmedInternalTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedInternalTransactionsAndEachConfirmationRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedInternalTransactionsAndEachConfirmationAsyncWithHttpInfo
     *
     * New Confirmed Internal Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationRB|null $newConfirmedInternalTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedInternalTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedInternalTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationR';
        $request = $this->newConfirmedInternalTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedInternalTransactionsAndEachConfirmationRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedInternalTransactionsAndEachConfirmation'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedInternalTransactionsAndEachConfirmationRB|null $newConfirmedInternalTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedInternalTransactionsAndEachConfirmationRequest($blockchain, $network, $context = null, $newConfirmedInternalTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedInternalTransactionsAndEachConfirmation'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedInternalTransactionsAndEachConfirmation'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedInternalTransactionsAndEachConfirmation'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-internal-transactions-confirmed-each-confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedInternalTransactionsAndEachConfirmationRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedInternalTransactionsAndEachConfirmationRB));
            } else {
                $httpBody = $newConfirmedInternalTransactionsAndEachConfirmationRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedTokensTransactions
     *
     * New Confirmed Tokens Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsRB|null $newConfirmedTokensTransactionsRB newConfirmedTokensTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedTokensTransactions($blockchain, $network, $context = null, $newConfirmedTokensTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactions'][0])
    {
        list($response) = $this->newConfirmedTokensTransactionsWithHttpInfo($blockchain, $network, $context, $newConfirmedTokensTransactionsRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedTokensTransactionsWithHttpInfo
     *
     * New Confirmed Tokens Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsRB|null $newConfirmedTokensTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedTokensTransactionsWithHttpInfo($blockchain, $network, $context = null, $newConfirmedTokensTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactions'][0])
    {
        $request = $this->newConfirmedTokensTransactionsRequest($blockchain, $network, $context, $newConfirmedTokensTransactionsRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactions409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedTokensTransactionsAsync
     *
     * New Confirmed Tokens Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsRB|null $newConfirmedTokensTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedTokensTransactionsAsync($blockchain, $network, $context = null, $newConfirmedTokensTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactions'][0])
    {
        return $this->newConfirmedTokensTransactionsAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedTokensTransactionsRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedTokensTransactionsAsyncWithHttpInfo
     *
     * New Confirmed Tokens Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsRB|null $newConfirmedTokensTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedTokensTransactionsAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedTokensTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactions'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsR';
        $request = $this->newConfirmedTokensTransactionsRequest($blockchain, $network, $context, $newConfirmedTokensTransactionsRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedTokensTransactions'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsRB|null $newConfirmedTokensTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedTokensTransactionsRequest($blockchain, $network, $context = null, $newConfirmedTokensTransactionsRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactions'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedTokensTransactions'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedTokensTransactions'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-tokens-transactions-confirmed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedTokensTransactionsRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedTokensTransactionsRB));
            } else {
                $httpBody = $newConfirmedTokensTransactionsRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newConfirmedTokensTransactionsAndEachConfirmation
     *
     * New Confirmed Tokens Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationRB|null $newConfirmedTokensTransactionsAndEachConfirmationRB newConfirmedTokensTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newConfirmedTokensTransactionsAndEachConfirmation($blockchain, $network, $context = null, $newConfirmedTokensTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'][0])
    {
        list($response) = $this->newConfirmedTokensTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context, $newConfirmedTokensTransactionsAndEachConfirmationRB, $contentType);
        return $response;
    }

    /**
     * Operation newConfirmedTokensTransactionsAndEachConfirmationWithHttpInfo
     *
     * New Confirmed Tokens Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationRB|null $newConfirmedTokensTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation400Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation403Response|\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newConfirmedTokensTransactionsAndEachConfirmationWithHttpInfo($blockchain, $network, $context = null, $newConfirmedTokensTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'][0])
    {
        $request = $this->newConfirmedTokensTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedTokensTransactionsAndEachConfirmationRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmation409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newConfirmedTokensTransactionsAndEachConfirmationAsync
     *
     * New Confirmed Tokens Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationRB|null $newConfirmedTokensTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedTokensTransactionsAndEachConfirmationAsync($blockchain, $network, $context = null, $newConfirmedTokensTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'][0])
    {
        return $this->newConfirmedTokensTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context, $newConfirmedTokensTransactionsAndEachConfirmationRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newConfirmedTokensTransactionsAndEachConfirmationAsyncWithHttpInfo
     *
     * New Confirmed Tokens Transactions And Each Confirmation
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationRB|null $newConfirmedTokensTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newConfirmedTokensTransactionsAndEachConfirmationAsyncWithHttpInfo($blockchain, $network, $context = null, $newConfirmedTokensTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationR';
        $request = $this->newConfirmedTokensTransactionsAndEachConfirmationRequest($blockchain, $network, $context, $newConfirmedTokensTransactionsAndEachConfirmationRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newConfirmedTokensTransactionsAndEachConfirmation'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewConfirmedTokensTransactionsAndEachConfirmationRB|null $newConfirmedTokensTransactionsAndEachConfirmationRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newConfirmedTokensTransactionsAndEachConfirmationRequest($blockchain, $network, $context = null, $newConfirmedTokensTransactionsAndEachConfirmationRB = null, string $contentType = self::contentTypes['newConfirmedTokensTransactionsAndEachConfirmation'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newConfirmedTokensTransactionsAndEachConfirmation'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newConfirmedTokensTransactionsAndEachConfirmation'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-tokens-transactions-confirmed-each-confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newConfirmedTokensTransactionsAndEachConfirmationRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newConfirmedTokensTransactionsAndEachConfirmationRB));
            } else {
                $httpBody = $newConfirmedTokensTransactionsAndEachConfirmationRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newUnconfirmedCoinsTransactions
     *
     * New Unconfirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsRB|null $newUnconfirmedCoinsTransactionsRB newUnconfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newUnconfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function newUnconfirmedCoinsTransactions($blockchain, $network, $context = null, $newUnconfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newUnconfirmedCoinsTransactions'][0])
    {
        list($response) = $this->newUnconfirmedCoinsTransactionsWithHttpInfo($blockchain, $network, $context, $newUnconfirmedCoinsTransactionsRB, $contentType);
        return $response;
    }

    /**
     * Operation newUnconfirmedCoinsTransactionsWithHttpInfo
     *
     * New Unconfirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsRB|null $newUnconfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newUnconfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \MitinSany/CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions400Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions401Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions403Response|\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions409Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function newUnconfirmedCoinsTransactionsWithHttpInfo($blockchain, $network, $context = null, $newUnconfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newUnconfirmedCoinsTransactions'][0])
    {
        $request = $this->newUnconfirmedCoinsTransactionsRequest($blockchain, $network, $context, $newUnconfirmedCoinsTransactionsRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactions409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MitinSany/CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation newUnconfirmedCoinsTransactionsAsync
     *
     * New Unconfirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsRB|null $newUnconfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newUnconfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newUnconfirmedCoinsTransactionsAsync($blockchain, $network, $context = null, $newUnconfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newUnconfirmedCoinsTransactions'][0])
    {
        return $this->newUnconfirmedCoinsTransactionsAsyncWithHttpInfo($blockchain, $network, $context, $newUnconfirmedCoinsTransactionsRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newUnconfirmedCoinsTransactionsAsyncWithHttpInfo
     *
     * New Unconfirmed Coins Transactions
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsRB|null $newUnconfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newUnconfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newUnconfirmedCoinsTransactionsAsyncWithHttpInfo($blockchain, $network, $context = null, $newUnconfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newUnconfirmedCoinsTransactions'][0])
    {
        $returnType = '\MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsR';
        $request = $this->newUnconfirmedCoinsTransactionsRequest($blockchain, $network, $context, $newUnconfirmedCoinsTransactionsRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newUnconfirmedCoinsTransactions'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \MitinSany/CryptoapisApiClient\Model\NewUnconfirmedCoinsTransactionsRB|null $newUnconfirmedCoinsTransactionsRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newUnconfirmedCoinsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newUnconfirmedCoinsTransactionsRequest($blockchain, $network, $context = null, $newUnconfirmedCoinsTransactionsRB = null, string $contentType = self::contentTypes['newUnconfirmedCoinsTransactions'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling newUnconfirmedCoinsTransactions'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling newUnconfirmedCoinsTransactions'
            );
        }




        $resourcePath = '/blockchain-events/{blockchain}/{network}/address-coins-transactions-unconfirmed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newUnconfirmedCoinsTransactionsRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newUnconfirmedCoinsTransactionsRB));
            } else {
                $httpBody = $newUnconfirmedCoinsTransactionsRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
