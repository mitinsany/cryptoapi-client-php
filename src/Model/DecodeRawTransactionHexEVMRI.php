<?php
/**
 * DecodeRawTransactionHexEVMRI
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Model;

use \ArrayAccess;
use \MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * DecodeRawTransactionHexEVMRI Class Doc Comment
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DecodeRawTransactionHexEVMRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DecodeRawTransactionHexEVMRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'gasLimit' => 'int',
        'gasPaidForData' => 'int',
        'inputData' => 'string',
        'nonce' => 'int',
        'r' => 'string',
        'recipient' => 'string',
        's' => 'string',
        'sender' => 'string',
        'type' => 'int',
        'v' => 'string',
        'fee' => '\MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIFee',
        'gasPrice' => '\MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIGasPrice',
        'value' => '\MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIValue',
        'blockchainSpecific' => '\MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIBSE'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'gasLimit' => null,
        'gasPaidForData' => null,
        'inputData' => null,
        'nonce' => null,
        'r' => null,
        'recipient' => null,
        's' => null,
        'sender' => null,
        'type' => null,
        'v' => null,
        'fee' => null,
        'gasPrice' => null,
        'value' => null,
        'blockchainSpecific' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'gasLimit' => false,
        'gasPaidForData' => false,
        'inputData' => false,
        'nonce' => false,
        'r' => false,
        'recipient' => false,
        's' => false,
        'sender' => false,
        'type' => false,
        'v' => false,
        'fee' => false,
        'gasPrice' => false,
        'value' => false,
        'blockchainSpecific' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gasLimit' => 'gasLimit',
        'gasPaidForData' => 'gasPaidForData',
        'inputData' => 'inputData',
        'nonce' => 'nonce',
        'r' => 'r',
        'recipient' => 'recipient',
        's' => 's',
        'sender' => 'sender',
        'type' => 'type',
        'v' => 'v',
        'fee' => 'fee',
        'gasPrice' => 'gasPrice',
        'value' => 'value',
        'blockchainSpecific' => 'blockchainSpecific'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gasLimit' => 'setGasLimit',
        'gasPaidForData' => 'setGasPaidForData',
        'inputData' => 'setInputData',
        'nonce' => 'setNonce',
        'r' => 'setR',
        'recipient' => 'setRecipient',
        's' => 'setS',
        'sender' => 'setSender',
        'type' => 'setType',
        'v' => 'setV',
        'fee' => 'setFee',
        'gasPrice' => 'setGasPrice',
        'value' => 'setValue',
        'blockchainSpecific' => 'setBlockchainSpecific'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gasLimit' => 'getGasLimit',
        'gasPaidForData' => 'getGasPaidForData',
        'inputData' => 'getInputData',
        'nonce' => 'getNonce',
        'r' => 'getR',
        'recipient' => 'getRecipient',
        's' => 'getS',
        'sender' => 'getSender',
        'type' => 'getType',
        'v' => 'getV',
        'fee' => 'getFee',
        'gasPrice' => 'getGasPrice',
        'value' => 'getValue',
        'blockchainSpecific' => 'getBlockchainSpecific'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('gasLimit', $data ?? [], null);
        $this->setIfExists('gasPaidForData', $data ?? [], null);
        $this->setIfExists('inputData', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('r', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('s', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('v', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('gasPrice', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('blockchainSpecific', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['gasLimit'] === null) {
            $invalidProperties[] = "'gasLimit' can't be null";
        }
        if ($this->container['gasPaidForData'] === null) {
            $invalidProperties[] = "'gasPaidForData' can't be null";
        }
        if ($this->container['inputData'] === null) {
            $invalidProperties[] = "'inputData' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ($this->container['r'] === null) {
            $invalidProperties[] = "'r' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['s'] === null) {
            $invalidProperties[] = "'s' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['v'] === null) {
            $invalidProperties[] = "'v' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['gasPrice'] === null) {
            $invalidProperties[] = "'gasPrice' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Represents the decoded transaction hex.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gasLimit
     *
     * @return int
     */
    public function getGasLimit()
    {
        return $this->container['gasLimit'];
    }

    /**
     * Sets gasLimit
     *
     * @param int $gasLimit Represents the amount of gas used by this specific transaction alone.
     *
     * @return self
     */
    public function setGasLimit($gasLimit)
    {
        if (is_null($gasLimit)) {
            throw new \InvalidArgumentException('non-nullable gasLimit cannot be null');
        }
        $this->container['gasLimit'] = $gasLimit;

        return $this;
    }

    /**
     * Gets gasPaidForData
     *
     * @return int
     */
    public function getGasPaidForData()
    {
        return $this->container['gasPaidForData'];
    }

    /**
     * Sets gasPaidForData
     *
     * @param int $gasPaidForData Represents the amount of gas paid for the data in the transaction.
     *
     * @return self
     */
    public function setGasPaidForData($gasPaidForData)
    {
        if (is_null($gasPaidForData)) {
            throw new \InvalidArgumentException('non-nullable gasPaidForData cannot be null');
        }
        $this->container['gasPaidForData'] = $gasPaidForData;

        return $this;
    }

    /**
     * Gets inputData
     *
     * @return string
     */
    public function getInputData()
    {
        return $this->container['inputData'];
    }

    /**
     * Sets inputData
     *
     * @param string $inputData Represents additional information that is required for the transaction.
     *
     * @return self
     */
    public function setInputData($inputData)
    {
        if (is_null($inputData)) {
            throw new \InvalidArgumentException('non-nullable inputData cannot be null');
        }
        $this->container['inputData'] = $inputData;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return int
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param int $nonce Represents the sequential running number for an address, starting from 0 for the first transaction.
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets r
     *
     * @return string
     */
    public function getR()
    {
        return $this->container['r'];
    }

    /**
     * Sets r
     *
     * @param string $r Represents output of an ECDSA signature.
     *
     * @return self
     */
    public function setR($r)
    {
        if (is_null($r)) {
            throw new \InvalidArgumentException('non-nullable r cannot be null');
        }
        $this->container['r'] = $r;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient The address which receives this transaction
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets s
     *
     * @return string
     */
    public function getS()
    {
        return $this->container['s'];
    }

    /**
     * Sets s
     *
     * @param string $s Represents output of an ECDSA signature.
     *
     * @return self
     */
    public function setS($s)
    {
        if (is_null($s)) {
            throw new \InvalidArgumentException('non-nullable s cannot be null');
        }
        $this->container['s'] = $s;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender Represents the address which sends this transaction
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Specifies the transaction type as one from three options: if response returns a \"0\" it means the raw transaction includes legacy transaction data, if it is \"1\" - includes access lists for EIP2930, and if it is \"2\" - EIP1559 data.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets v
     *
     * @return string
     */
    public function getV()
    {
        return $this->container['v'];
    }

    /**
     * Sets v
     *
     * @param string $v Defines the the recovery id.
     *
     * @return self
     */
    public function setV($v)
    {
        if (is_null($v)) {
            throw new \InvalidArgumentException('non-nullable v cannot be null');
        }
        $this->container['v'] = $v;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIFee
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIFee $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets gasPrice
     *
     * @return \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIGasPrice
     */
    public function getGasPrice()
    {
        return $this->container['gasPrice'];
    }

    /**
     * Sets gasPrice
     *
     * @param \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIGasPrice $gasPrice gasPrice
     *
     * @return self
     */
    public function setGasPrice($gasPrice)
    {
        if (is_null($gasPrice)) {
            throw new \InvalidArgumentException('non-nullable gasPrice cannot be null');
        }
        $this->container['gasPrice'] = $gasPrice;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIValue $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets blockchainSpecific
     *
     * @return \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIBSE|null
     */
    public function getBlockchainSpecific()
    {
        return $this->container['blockchainSpecific'];
    }

    /**
     * Sets blockchainSpecific
     *
     * @param \MitinSany/CryptoapisApiClient\Model\DecodeRawTransactionHexEVMRIBSE|null $blockchainSpecific blockchainSpecific
     *
     * @return self
     */
    public function setBlockchainSpecific($blockchainSpecific)
    {
        if (is_null($blockchainSpecific)) {
            throw new \InvalidArgumentException('non-nullable blockchainSpecific cannot be null');
        }
        $this->container['blockchainSpecific'] = $blockchainSpecific;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


