<?php
/**
 * AddressTokensTransactionConfirmedEachConfirmationDataItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Model;

use \ArrayAccess;
use \MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * AddressTokensTransactionConfirmedEachConfirmationDataItem Class Doc Comment
 *
 * @category Class
 * @description Defines an &#x60;item&#x60; as one result.
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddressTokensTransactionConfirmedEachConfirmationDataItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddressTokensTransactionConfirmedEachConfirmation_data_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blockchain' => 'string',
        'network' => 'string',
        'address' => 'string',
        'minedInBlock' => '\MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedDataItemMinedInBlock',
        'transactionId' => 'string',
        'currentConfirmations' => 'int',
        'targetConfirmations' => 'int',
        'tokenType' => 'string',
        'token' => '\MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedEachConfirmationToken',
        'direction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'blockchain' => null,
        'network' => null,
        'address' => null,
        'minedInBlock' => null,
        'transactionId' => null,
        'currentConfirmations' => null,
        'targetConfirmations' => null,
        'tokenType' => null,
        'token' => null,
        'direction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'blockchain' => false,
        'network' => false,
        'address' => false,
        'minedInBlock' => false,
        'transactionId' => false,
        'currentConfirmations' => false,
        'targetConfirmations' => false,
        'tokenType' => false,
        'token' => false,
        'direction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blockchain' => 'blockchain',
        'network' => 'network',
        'address' => 'address',
        'minedInBlock' => 'minedInBlock',
        'transactionId' => 'transactionId',
        'currentConfirmations' => 'currentConfirmations',
        'targetConfirmations' => 'targetConfirmations',
        'tokenType' => 'tokenType',
        'token' => 'token',
        'direction' => 'direction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blockchain' => 'setBlockchain',
        'network' => 'setNetwork',
        'address' => 'setAddress',
        'minedInBlock' => 'setMinedInBlock',
        'transactionId' => 'setTransactionId',
        'currentConfirmations' => 'setCurrentConfirmations',
        'targetConfirmations' => 'setTargetConfirmations',
        'tokenType' => 'setTokenType',
        'token' => 'setToken',
        'direction' => 'setDirection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blockchain' => 'getBlockchain',
        'network' => 'getNetwork',
        'address' => 'getAddress',
        'minedInBlock' => 'getMinedInBlock',
        'transactionId' => 'getTransactionId',
        'currentConfirmations' => 'getCurrentConfirmations',
        'targetConfirmations' => 'getTargetConfirmations',
        'tokenType' => 'getTokenType',
        'token' => 'getToken',
        'direction' => 'getDirection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TOKEN_TYPE_ERC_20 = 'ERC-20';
    public const TOKEN_TYPE_ERC_721 = 'ERC-721';
    public const TOKEN_TYPE_OMNI = 'OMNI';
    public const TOKEN_TYPE_BEP_20 = 'BEP-20';
    public const TOKEN_TYPE_TRC_20 = 'TRC-20';
    public const TOKEN_TYPE_TRC_721 = 'TRC-721';
    public const DIRECTION_INCOMING = 'incoming';
    public const DIRECTION_OUTGOING = 'outgoing';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTokenTypeAllowableValues()
    {
        return [
            self::TOKEN_TYPE_ERC_20,
            self::TOKEN_TYPE_ERC_721,
            self::TOKEN_TYPE_OMNI,
            self::TOKEN_TYPE_BEP_20,
            self::TOKEN_TYPE_TRC_20,
            self::TOKEN_TYPE_TRC_721,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INCOMING,
            self::DIRECTION_OUTGOING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('blockchain', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('minedInBlock', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('currentConfirmations', $data ?? [], null);
        $this->setIfExists('targetConfirmations', $data ?? [], null);
        $this->setIfExists('tokenType', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['blockchain'] === null) {
            $invalidProperties[] = "'blockchain' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['minedInBlock'] === null) {
            $invalidProperties[] = "'minedInBlock' can't be null";
        }
        if ($this->container['transactionId'] === null) {
            $invalidProperties[] = "'transactionId' can't be null";
        }
        if ($this->container['currentConfirmations'] === null) {
            $invalidProperties[] = "'currentConfirmations' can't be null";
        }
        if ($this->container['targetConfirmations'] === null) {
            $invalidProperties[] = "'targetConfirmations' can't be null";
        }
        if ($this->container['tokenType'] === null) {
            $invalidProperties[] = "'tokenType' can't be null";
        }
        $allowedValues = $this->getTokenTypeAllowableValues();
        if (!is_null($this->container['tokenType']) && !in_array($this->container['tokenType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tokenType', must be one of '%s'",
                $this->container['tokenType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blockchain
     *
     * @return string
     */
    public function getBlockchain()
    {
        return $this->container['blockchain'];
    }

    /**
     * Sets blockchain
     *
     * @param string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     *
     * @return self
     */
    public function setBlockchain($blockchain)
    {
        if (is_null($blockchain)) {
            throw new \InvalidArgumentException('non-nullable blockchain cannot be null');
        }
        $this->container['blockchain'] = $blockchain;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"sepolia\",  are test networks.
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Defines the specific address to which the transaction has been sent.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets minedInBlock
     *
     * @return \MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedDataItemMinedInBlock
     */
    public function getMinedInBlock()
    {
        return $this->container['minedInBlock'];
    }

    /**
     * Sets minedInBlock
     *
     * @param \MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedDataItemMinedInBlock $minedInBlock minedInBlock
     *
     * @return self
     */
    public function setMinedInBlock($minedInBlock)
    {
        if (is_null($minedInBlock)) {
            throw new \InvalidArgumentException('non-nullable minedInBlock cannot be null');
        }
        $this->container['minedInBlock'] = $minedInBlock;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param string $transactionId Defines the unique ID of the specific transaction, i.e. its identification number.
     *
     * @return self
     */
    public function setTransactionId($transactionId)
    {
        if (is_null($transactionId)) {
            throw new \InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets currentConfirmations
     *
     * @return int
     */
    public function getCurrentConfirmations()
    {
        return $this->container['currentConfirmations'];
    }

    /**
     * Sets currentConfirmations
     *
     * @param int $currentConfirmations Defines the number of currently received confirmations for the transaction.
     *
     * @return self
     */
    public function setCurrentConfirmations($currentConfirmations)
    {
        if (is_null($currentConfirmations)) {
            throw new \InvalidArgumentException('non-nullable currentConfirmations cannot be null');
        }
        $this->container['currentConfirmations'] = $currentConfirmations;

        return $this;
    }

    /**
     * Gets targetConfirmations
     *
     * @return int
     */
    public function getTargetConfirmations()
    {
        return $this->container['targetConfirmations'];
    }

    /**
     * Sets targetConfirmations
     *
     * @param int $targetConfirmations Defines the number of confirmation transactions requested as callbacks, i.e. the system can notify till the n-th confirmation.
     *
     * @return self
     */
    public function setTargetConfirmations($targetConfirmations)
    {
        if (is_null($targetConfirmations)) {
            throw new \InvalidArgumentException('non-nullable targetConfirmations cannot be null');
        }
        $this->container['targetConfirmations'] = $targetConfirmations;

        return $this;
    }

    /**
     * Gets tokenType
     *
     * @return string
     */
    public function getTokenType()
    {
        return $this->container['tokenType'];
    }

    /**
     * Sets tokenType
     *
     * @param string $tokenType Defines the type of token sent with the transaction, e.g. ERC 20.
     *
     * @return self
     */
    public function setTokenType($tokenType)
    {
        if (is_null($tokenType)) {
            throw new \InvalidArgumentException('non-nullable tokenType cannot be null');
        }
        $allowedValues = $this->getTokenTypeAllowableValues();
        if (!in_array($tokenType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tokenType', must be one of '%s'",
                    $tokenType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tokenType'] = $tokenType;

        return $this;
    }

    /**
     * Gets token
     *
     * @return \MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedEachConfirmationToken
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param \MitinSany/CryptoapisApiClient\Model\AddressTokensTransactionConfirmedEachConfirmationToken $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction Defines whether the transaction is \"incoming\" or \"outgoing\".
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


