<?php
/**
 * GetBlockDetailsByBlockHeightUTXOsRI
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Model;

use \ArrayAccess;
use \MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * GetBlockDetailsByBlockHeightUTXOsRI Class Doc Comment
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetBlockDetailsByBlockHeightUTXOsRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetBlockDetailsByBlockHeightUTXOsRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bits' => 'int',
        'chainwork' => 'int',
        'difficulty' => 'int',
        'merkleroot' => 'string',
        'size' => 'int',
        'version' => 'int',
        'hash' => 'string',
        'height' => 'int',
        'nextBlockHash' => 'string',
        'previousBlockHash' => 'string',
        'strippedSize' => 'int',
        'timestamp' => 'int',
        'transactionsCount' => 'int',
        'versionHex' => 'string',
        'weight' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bits' => null,
        'chainwork' => null,
        'difficulty' => null,
        'merkleroot' => null,
        'size' => null,
        'version' => null,
        'hash' => null,
        'height' => null,
        'nextBlockHash' => null,
        'previousBlockHash' => null,
        'strippedSize' => null,
        'timestamp' => null,
        'transactionsCount' => null,
        'versionHex' => null,
        'weight' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bits' => false,
        'chainwork' => false,
        'difficulty' => false,
        'merkleroot' => false,
        'size' => false,
        'version' => false,
        'hash' => false,
        'height' => false,
        'nextBlockHash' => false,
        'previousBlockHash' => false,
        'strippedSize' => false,
        'timestamp' => false,
        'transactionsCount' => false,
        'versionHex' => false,
        'weight' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bits' => 'bits',
        'chainwork' => 'chainwork',
        'difficulty' => 'difficulty',
        'merkleroot' => 'merkleroot',
        'size' => 'size',
        'version' => 'version',
        'hash' => 'hash',
        'height' => 'height',
        'nextBlockHash' => 'nextBlockHash',
        'previousBlockHash' => 'previousBlockHash',
        'strippedSize' => 'strippedSize',
        'timestamp' => 'timestamp',
        'transactionsCount' => 'transactionsCount',
        'versionHex' => 'versionHex',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bits' => 'setBits',
        'chainwork' => 'setChainwork',
        'difficulty' => 'setDifficulty',
        'merkleroot' => 'setMerkleroot',
        'size' => 'setSize',
        'version' => 'setVersion',
        'hash' => 'setHash',
        'height' => 'setHeight',
        'nextBlockHash' => 'setNextBlockHash',
        'previousBlockHash' => 'setPreviousBlockHash',
        'strippedSize' => 'setStrippedSize',
        'timestamp' => 'setTimestamp',
        'transactionsCount' => 'setTransactionsCount',
        'versionHex' => 'setVersionHex',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bits' => 'getBits',
        'chainwork' => 'getChainwork',
        'difficulty' => 'getDifficulty',
        'merkleroot' => 'getMerkleroot',
        'size' => 'getSize',
        'version' => 'getVersion',
        'hash' => 'getHash',
        'height' => 'getHeight',
        'nextBlockHash' => 'getNextBlockHash',
        'previousBlockHash' => 'getPreviousBlockHash',
        'strippedSize' => 'getStrippedSize',
        'timestamp' => 'getTimestamp',
        'transactionsCount' => 'getTransactionsCount',
        'versionHex' => 'getVersionHex',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bits', $data ?? [], null);
        $this->setIfExists('chainwork', $data ?? [], null);
        $this->setIfExists('difficulty', $data ?? [], null);
        $this->setIfExists('merkleroot', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('nextBlockHash', $data ?? [], null);
        $this->setIfExists('previousBlockHash', $data ?? [], null);
        $this->setIfExists('strippedSize', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('transactionsCount', $data ?? [], null);
        $this->setIfExists('versionHex', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bits'] === null) {
            $invalidProperties[] = "'bits' can't be null";
        }
        if ($this->container['chainwork'] === null) {
            $invalidProperties[] = "'chainwork' can't be null";
        }
        if ($this->container['difficulty'] === null) {
            $invalidProperties[] = "'difficulty' can't be null";
        }
        if ($this->container['merkleroot'] === null) {
            $invalidProperties[] = "'merkleroot' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['nextBlockHash'] === null) {
            $invalidProperties[] = "'nextBlockHash' can't be null";
        }
        if ($this->container['previousBlockHash'] === null) {
            $invalidProperties[] = "'previousBlockHash' can't be null";
        }
        if ($this->container['strippedSize'] === null) {
            $invalidProperties[] = "'strippedSize' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['transactionsCount'] === null) {
            $invalidProperties[] = "'transactionsCount' can't be null";
        }
        if ($this->container['versionHex'] === null) {
            $invalidProperties[] = "'versionHex' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bits
     *
     * @return int
     */
    public function getBits()
    {
        return $this->container['bits'];
    }

    /**
     * Sets bits
     *
     * @param int $bits Numeric representation of the Block bits
     *
     * @return self
     */
    public function setBits($bits)
    {
        if (is_null($bits)) {
            throw new \InvalidArgumentException('non-nullable bits cannot be null');
        }
        $this->container['bits'] = $bits;

        return $this;
    }

    /**
     * Gets chainwork
     *
     * @return int
     */
    public function getChainwork()
    {
        return $this->container['chainwork'];
    }

    /**
     * Sets chainwork
     *
     * @param int $chainwork Numeric representation of the expected number of hashes required to produce the chain up to this block
     *
     * @return self
     */
    public function setChainwork($chainwork)
    {
        if (is_null($chainwork)) {
            throw new \InvalidArgumentException('non-nullable chainwork cannot be null');
        }
        $this->container['chainwork'] = $chainwork;

        return $this;
    }

    /**
     * Gets difficulty
     *
     * @return int
     */
    public function getDifficulty()
    {
        return $this->container['difficulty'];
    }

    /**
     * Sets difficulty
     *
     * @param int $difficulty Numeric representation of the block difficulty
     *
     * @return self
     */
    public function setDifficulty($difficulty)
    {
        if (is_null($difficulty)) {
            throw new \InvalidArgumentException('non-nullable difficulty cannot be null');
        }
        $this->container['difficulty'] = $difficulty;

        return $this;
    }

    /**
     * Gets merkleroot
     *
     * @return string
     */
    public function getMerkleroot()
    {
        return $this->container['merkleroot'];
    }

    /**
     * Sets merkleroot
     *
     * @param string $merkleroot String representation of the block merkle root
     *
     * @return self
     */
    public function setMerkleroot($merkleroot)
    {
        if (is_null($merkleroot)) {
            throw new \InvalidArgumentException('non-nullable merkleroot cannot be null');
        }
        $this->container['merkleroot'] = $merkleroot;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Numeric representation of the block size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Numeric representation of the block version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash String representation of the block hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Numeric representation of the block height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets nextBlockHash
     *
     * @return string
     */
    public function getNextBlockHash()
    {
        return $this->container['nextBlockHash'];
    }

    /**
     * Sets nextBlockHash
     *
     * @param string $nextBlockHash String representation of the next block hash
     *
     * @return self
     */
    public function setNextBlockHash($nextBlockHash)
    {
        if (is_null($nextBlockHash)) {
            throw new \InvalidArgumentException('non-nullable nextBlockHash cannot be null');
        }
        $this->container['nextBlockHash'] = $nextBlockHash;

        return $this;
    }

    /**
     * Gets previousBlockHash
     *
     * @return string
     */
    public function getPreviousBlockHash()
    {
        return $this->container['previousBlockHash'];
    }

    /**
     * Sets previousBlockHash
     *
     * @param string $previousBlockHash String representation of the previous block hash
     *
     * @return self
     */
    public function setPreviousBlockHash($previousBlockHash)
    {
        if (is_null($previousBlockHash)) {
            throw new \InvalidArgumentException('non-nullable previousBlockHash cannot be null');
        }
        $this->container['previousBlockHash'] = $previousBlockHash;

        return $this;
    }

    /**
     * Gets strippedSize
     *
     * @return int
     */
    public function getStrippedSize()
    {
        return $this->container['strippedSize'];
    }

    /**
     * Sets strippedSize
     *
     * @param int $strippedSize Numeric representation of the block size excluding witness data
     *
     * @return self
     */
    public function setStrippedSize($strippedSize)
    {
        if (is_null($strippedSize)) {
            throw new \InvalidArgumentException('non-nullable strippedSize cannot be null');
        }
        $this->container['strippedSize'] = $strippedSize;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp Numeric representation of the block timestamp in seconds since epoch
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets transactionsCount
     *
     * @return int
     */
    public function getTransactionsCount()
    {
        return $this->container['transactionsCount'];
    }

    /**
     * Sets transactionsCount
     *
     * @param int $transactionsCount Numeric representation of the block transactions count
     *
     * @return self
     */
    public function setTransactionsCount($transactionsCount)
    {
        if (is_null($transactionsCount)) {
            throw new \InvalidArgumentException('non-nullable transactionsCount cannot be null');
        }
        $this->container['transactionsCount'] = $transactionsCount;

        return $this;
    }

    /**
     * Gets versionHex
     *
     * @return string
     */
    public function getVersionHex()
    {
        return $this->container['versionHex'];
    }

    /**
     * Sets versionHex
     *
     * @param string $versionHex String representation of the block version in hexadecimal format
     *
     * @return self
     */
    public function setVersionHex($versionHex)
    {
        if (is_null($versionHex)) {
            throw new \InvalidArgumentException('non-nullable versionHex cannot be null');
        }
        $this->container['versionHex'] = $versionHex;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight Numeric representation of block weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


