<?php
/**
 * GetAssetDetailsByAssetSymbolRISC
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MitinSany/CryptoapisApiClient\Model;

use \ArrayAccess;
use \MitinSany/CryptoapisApiClient\ObjectSerializer;

/**
 * GetAssetDetailsByAssetSymbolRISC Class Doc Comment
 *
 * @category Class
 * @description Crypto Type Data
 * @package  MitinSany/CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetAssetDetailsByAssetSymbolRISC implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAssetDetailsByAssetSymbolRISC';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_1hourPriceChangeInPercentage' => 'string',
        '_1weekPriceChangeInPercentage' => 'string',
        '_24hoursPriceChangeInPercentage' => 'string',
        '_24hoursTradingVolume' => 'string',
        'circulatingSupply' => 'string',
        'marketCapInUSD' => 'string',
        'maxSupply' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_1hourPriceChangeInPercentage' => null,
        '_1weekPriceChangeInPercentage' => null,
        '_24hoursPriceChangeInPercentage' => null,
        '_24hoursTradingVolume' => null,
        'circulatingSupply' => null,
        'marketCapInUSD' => null,
        'maxSupply' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_1hourPriceChangeInPercentage' => false,
        '_1weekPriceChangeInPercentage' => false,
        '_24hoursPriceChangeInPercentage' => false,
        '_24hoursTradingVolume' => false,
        'circulatingSupply' => false,
        'marketCapInUSD' => false,
        'maxSupply' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_1hourPriceChangeInPercentage' => '1HourPriceChangeInPercentage',
        '_1weekPriceChangeInPercentage' => '1WeekPriceChangeInPercentage',
        '_24hoursPriceChangeInPercentage' => '24HoursPriceChangeInPercentage',
        '_24hoursTradingVolume' => '24HoursTradingVolume',
        'circulatingSupply' => 'circulatingSupply',
        'marketCapInUSD' => 'marketCapInUSD',
        'maxSupply' => 'maxSupply',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_1hourPriceChangeInPercentage' => 'set1hourPriceChangeInPercentage',
        '_1weekPriceChangeInPercentage' => 'set1weekPriceChangeInPercentage',
        '_24hoursPriceChangeInPercentage' => 'set24hoursPriceChangeInPercentage',
        '_24hoursTradingVolume' => 'set24hoursTradingVolume',
        'circulatingSupply' => 'setCirculatingSupply',
        'marketCapInUSD' => 'setMarketCapInUSD',
        'maxSupply' => 'setMaxSupply',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_1hourPriceChangeInPercentage' => 'get1hourPriceChangeInPercentage',
        '_1weekPriceChangeInPercentage' => 'get1weekPriceChangeInPercentage',
        '_24hoursPriceChangeInPercentage' => 'get24hoursPriceChangeInPercentage',
        '_24hoursTradingVolume' => 'get24hoursTradingVolume',
        'circulatingSupply' => 'getCirculatingSupply',
        'marketCapInUSD' => 'getMarketCapInUSD',
        'maxSupply' => 'getMaxSupply',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_COIN = 'coin';
    public const TYPE_TOKEN = 'token';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COIN,
            self::TYPE_TOKEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_1hourPriceChangeInPercentage', $data ?? [], null);
        $this->setIfExists('_1weekPriceChangeInPercentage', $data ?? [], null);
        $this->setIfExists('_24hoursPriceChangeInPercentage', $data ?? [], null);
        $this->setIfExists('_24hoursTradingVolume', $data ?? [], null);
        $this->setIfExists('circulatingSupply', $data ?? [], null);
        $this->setIfExists('marketCapInUSD', $data ?? [], null);
        $this->setIfExists('maxSupply', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_1hourPriceChangeInPercentage'] === null) {
            $invalidProperties[] = "'_1hourPriceChangeInPercentage' can't be null";
        }
        if ($this->container['_1weekPriceChangeInPercentage'] === null) {
            $invalidProperties[] = "'_1weekPriceChangeInPercentage' can't be null";
        }
        if ($this->container['_24hoursPriceChangeInPercentage'] === null) {
            $invalidProperties[] = "'_24hoursPriceChangeInPercentage' can't be null";
        }
        if ($this->container['_24hoursTradingVolume'] === null) {
            $invalidProperties[] = "'_24hoursTradingVolume' can't be null";
        }
        if ($this->container['circulatingSupply'] === null) {
            $invalidProperties[] = "'circulatingSupply' can't be null";
        }
        if ($this->container['marketCapInUSD'] === null) {
            $invalidProperties[] = "'marketCapInUSD' can't be null";
        }
        if ($this->container['maxSupply'] === null) {
            $invalidProperties[] = "'maxSupply' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _1hourPriceChangeInPercentage
     *
     * @return string
     */
    public function get1hourPriceChangeInPercentage()
    {
        return $this->container['_1hourPriceChangeInPercentage'];
    }

    /**
     * Sets _1hourPriceChangeInPercentage
     *
     * @param string $_1hourPriceChangeInPercentage Represents the percentage of the asset's current price against the its price from 1 hour ago.
     *
     * @return self
     */
    public function set1hourPriceChangeInPercentage($_1hourPriceChangeInPercentage)
    {
        if (is_null($_1hourPriceChangeInPercentage)) {
            throw new \InvalidArgumentException('non-nullable _1hourPriceChangeInPercentage cannot be null');
        }
        $this->container['_1hourPriceChangeInPercentage'] = $_1hourPriceChangeInPercentage;

        return $this;
    }

    /**
     * Gets _1weekPriceChangeInPercentage
     *
     * @return string
     */
    public function get1weekPriceChangeInPercentage()
    {
        return $this->container['_1weekPriceChangeInPercentage'];
    }

    /**
     * Sets _1weekPriceChangeInPercentage
     *
     * @param string $_1weekPriceChangeInPercentage Represents the percentage of the asset's current price against the its price from 1 week ago.
     *
     * @return self
     */
    public function set1weekPriceChangeInPercentage($_1weekPriceChangeInPercentage)
    {
        if (is_null($_1weekPriceChangeInPercentage)) {
            throw new \InvalidArgumentException('non-nullable _1weekPriceChangeInPercentage cannot be null');
        }
        $this->container['_1weekPriceChangeInPercentage'] = $_1weekPriceChangeInPercentage;

        return $this;
    }

    /**
     * Gets _24hoursPriceChangeInPercentage
     *
     * @return string
     */
    public function get24hoursPriceChangeInPercentage()
    {
        return $this->container['_24hoursPriceChangeInPercentage'];
    }

    /**
     * Sets _24hoursPriceChangeInPercentage
     *
     * @param string $_24hoursPriceChangeInPercentage Represents the percentage of the asset's current price against the its price from 24 hours ago.
     *
     * @return self
     */
    public function set24hoursPriceChangeInPercentage($_24hoursPriceChangeInPercentage)
    {
        if (is_null($_24hoursPriceChangeInPercentage)) {
            throw new \InvalidArgumentException('non-nullable _24hoursPriceChangeInPercentage cannot be null');
        }
        $this->container['_24hoursPriceChangeInPercentage'] = $_24hoursPriceChangeInPercentage;

        return $this;
    }

    /**
     * Gets _24hoursTradingVolume
     *
     * @return string
     */
    public function get24hoursTradingVolume()
    {
        return $this->container['_24hoursTradingVolume'];
    }

    /**
     * Sets _24hoursTradingVolume
     *
     * @param string $_24hoursTradingVolume Represents the trading volume of the asset for the time frame of 24 hours.
     *
     * @return self
     */
    public function set24hoursTradingVolume($_24hoursTradingVolume)
    {
        if (is_null($_24hoursTradingVolume)) {
            throw new \InvalidArgumentException('non-nullable _24hoursTradingVolume cannot be null');
        }
        $this->container['_24hoursTradingVolume'] = $_24hoursTradingVolume;

        return $this;
    }

    /**
     * Gets circulatingSupply
     *
     * @return string
     */
    public function getCirculatingSupply()
    {
        return $this->container['circulatingSupply'];
    }

    /**
     * Sets circulatingSupply
     *
     * @param string $circulatingSupply Represents the amount of the asset that is circulating on the market and in public hands.
     *
     * @return self
     */
    public function setCirculatingSupply($circulatingSupply)
    {
        if (is_null($circulatingSupply)) {
            throw new \InvalidArgumentException('non-nullable circulatingSupply cannot be null');
        }
        $this->container['circulatingSupply'] = $circulatingSupply;

        return $this;
    }

    /**
     * Gets marketCapInUSD
     *
     * @return string
     */
    public function getMarketCapInUSD()
    {
        return $this->container['marketCapInUSD'];
    }

    /**
     * Sets marketCapInUSD
     *
     * @param string $marketCapInUSD Defines the total market value of the asset's circulating supply in USD.
     *
     * @return self
     */
    public function setMarketCapInUSD($marketCapInUSD)
    {
        if (is_null($marketCapInUSD)) {
            throw new \InvalidArgumentException('non-nullable marketCapInUSD cannot be null');
        }
        $this->container['marketCapInUSD'] = $marketCapInUSD;

        return $this;
    }

    /**
     * Gets maxSupply
     *
     * @return string
     */
    public function getMaxSupply()
    {
        return $this->container['maxSupply'];
    }

    /**
     * Sets maxSupply
     *
     * @param string $maxSupply Represents the maximum amount of all coins of a specific asset that will ever exist in its lifetime.
     *
     * @return self
     */
    public function setMaxSupply($maxSupply)
    {
        if (is_null($maxSupply)) {
            throw new \InvalidArgumentException('non-nullable maxSupply cannot be null');
        }
        $this->container['maxSupply'] = $maxSupply;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Defines the type of the supported asset. This could be either \"crypto\" or \"fiat\".
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


