<?php
/**
 * ListTransactionsByAddressSolanaRData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Model;

use \ArrayAccess;
use \CryptoapisApiClient\ObjectSerializer;

/**
 * ListTransactionsByAddressSolanaRData Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListTransactionsByAddressSolanaRData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListTransactionsByAddressSolanaR_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'limit' => 'int',
        'startingAfter' => 'string',
        'hasMore' => 'bool',
        'nextStartingAfter' => 'string',
        'sortingOrder' => 'string',
        'items' => '\CryptoapisApiClient\Model\ListTransactionsByAddressSolanaRI[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'limit' => null,
        'startingAfter' => null,
        'hasMore' => null,
        'nextStartingAfter' => null,
        'sortingOrder' => null,
        'items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'limit' => false,
        'startingAfter' => false,
        'hasMore' => false,
        'nextStartingAfter' => false,
        'sortingOrder' => false,
        'items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'limit' => 'limit',
        'startingAfter' => 'startingAfter',
        'hasMore' => 'hasMore',
        'nextStartingAfter' => 'nextStartingAfter',
        'sortingOrder' => 'sortingOrder',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'limit' => 'setLimit',
        'startingAfter' => 'setStartingAfter',
        'hasMore' => 'setHasMore',
        'nextStartingAfter' => 'setNextStartingAfter',
        'sortingOrder' => 'setSortingOrder',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'limit' => 'getLimit',
        'startingAfter' => 'getStartingAfter',
        'hasMore' => 'getHasMore',
        'nextStartingAfter' => 'getNextStartingAfter',
        'sortingOrder' => 'getSortingOrder',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('startingAfter', $data ?? [], null);
        $this->setIfExists('hasMore', $data ?? [], null);
        $this->setIfExists('nextStartingAfter', $data ?? [], null);
        $this->setIfExists('sortingOrder', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['limit'] === null) {
            $invalidProperties[] = "'limit' can't be null";
        }
        if ($this->container['hasMore'] === null) {
            $invalidProperties[] = "'hasMore' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Defines how many items should be returned in the response per page basis.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets startingAfter
     *
     * @return string|null
     */
    public function getStartingAfter()
    {
        return $this->container['startingAfter'];
    }

    /**
     * Sets startingAfter
     *
     * @param string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from.
     *
     * @return self
     */
    public function setStartingAfter($startingAfter)
    {
        if (is_null($startingAfter)) {
            throw new \InvalidArgumentException('non-nullable startingAfter cannot be null');
        }
        $this->container['startingAfter'] = $startingAfter;

        return $this;
    }

    /**
     * Gets hasMore
     *
     * @return bool
     */
    public function getHasMore()
    {
        return $this->container['hasMore'];
    }

    /**
     * Sets hasMore
     *
     * @param bool $hasMore Defines whether or not there are more elements available after this set.
     *
     * @return self
     */
    public function setHasMore($hasMore)
    {
        if (is_null($hasMore)) {
            throw new \InvalidArgumentException('non-nullable hasMore cannot be null');
        }
        $this->container['hasMore'] = $hasMore;

        return $this;
    }

    /**
     * Gets nextStartingAfter
     *
     * @return string|null
     */
    public function getNextStartingAfter()
    {
        return $this->container['nextStartingAfter'];
    }

    /**
     * Sets nextStartingAfter
     *
     * @param string|null $nextStartingAfter Defines the id of the next page which the next list should start from.
     *
     * @return self
     */
    public function setNextStartingAfter($nextStartingAfter)
    {
        if (is_null($nextStartingAfter)) {
            throw new \InvalidArgumentException('non-nullable nextStartingAfter cannot be null');
        }
        $this->container['nextStartingAfter'] = $nextStartingAfter;

        return $this;
    }

    /**
     * Gets sortingOrder
     *
     * @return string|null
     */
    public function getSortingOrder()
    {
        return $this->container['sortingOrder'];
    }

    /**
     * Sets sortingOrder
     *
     * @param string|null $sortingOrder Defines what the sorting order is either ascending or descending.
     *
     * @return self
     */
    public function setSortingOrder($sortingOrder)
    {
        if (is_null($sortingOrder)) {
            throw new \InvalidArgumentException('non-nullable sortingOrder cannot be null');
        }
        $this->container['sortingOrder'] = $sortingOrder;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CryptoapisApiClient\Model\ListTransactionsByAddressSolanaRI[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CryptoapisApiClient\Model\ListTransactionsByAddressSolanaRI[] $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


