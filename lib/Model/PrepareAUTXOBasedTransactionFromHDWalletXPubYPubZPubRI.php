<?php
/**
 * PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Model;

use \ArrayAccess;
use \CryptoapisApiClient\ObjectSerializer;

/**
 * PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrepareAUTXO-BasedTransactionFromHDWalletXPubYPubZPubRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalData' => 'string',
        'locktime' => 'int',
        'size' => 'int',
        'version' => 'int',
        'fee' => '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFee',
        'feePerByte' => '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFeePerByte',
        'inputs' => '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIInputsInner[]',
        'outputs' => '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIOutputsInner[]',
        'blockchainSpecific' => '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additionalData' => null,
        'locktime' => 'int64',
        'size' => null,
        'version' => null,
        'fee' => null,
        'feePerByte' => null,
        'inputs' => null,
        'outputs' => null,
        'blockchainSpecific' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additionalData' => false,
        'locktime' => false,
        'size' => false,
        'version' => false,
        'fee' => false,
        'feePerByte' => false,
        'inputs' => false,
        'outputs' => false,
        'blockchainSpecific' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalData' => 'additionalData',
        'locktime' => 'locktime',
        'size' => 'size',
        'version' => 'version',
        'fee' => 'fee',
        'feePerByte' => 'feePerByte',
        'inputs' => 'inputs',
        'outputs' => 'outputs',
        'blockchainSpecific' => 'blockchainSpecific'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalData' => 'setAdditionalData',
        'locktime' => 'setLocktime',
        'size' => 'setSize',
        'version' => 'setVersion',
        'fee' => 'setFee',
        'feePerByte' => 'setFeePerByte',
        'inputs' => 'setInputs',
        'outputs' => 'setOutputs',
        'blockchainSpecific' => 'setBlockchainSpecific'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalData' => 'getAdditionalData',
        'locktime' => 'getLocktime',
        'size' => 'getSize',
        'version' => 'getVersion',
        'fee' => 'getFee',
        'feePerByte' => 'getFeePerByte',
        'inputs' => 'getInputs',
        'outputs' => 'getOutputs',
        'blockchainSpecific' => 'getBlockchainSpecific'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('additionalData', $data ?? [], null);
        $this->setIfExists('locktime', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('feePerByte', $data ?? [], null);
        $this->setIfExists('inputs', $data ?? [], null);
        $this->setIfExists('outputs', $data ?? [], null);
        $this->setIfExists('blockchainSpecific', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['additionalData'] === null) {
            $invalidProperties[] = "'additionalData' can't be null";
        }
        if ($this->container['locktime'] === null) {
            $invalidProperties[] = "'locktime' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['feePerByte'] === null) {
            $invalidProperties[] = "'feePerByte' can't be null";
        }
        if ($this->container['inputs'] === null) {
            $invalidProperties[] = "'inputs' can't be null";
        }
        if ($this->container['outputs'] === null) {
            $invalidProperties[] = "'outputs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalData
     *
     * @return string
     */
    public function getAdditionalData()
    {
        return $this->container['additionalData'];
    }

    /**
     * Sets additionalData
     *
     * @param string $additionalData Representation of the additional data
     *
     * @return self
     */
    public function setAdditionalData($additionalData)
    {
        if (is_null($additionalData)) {
            throw new \InvalidArgumentException('non-nullable additionalData cannot be null');
        }
        $this->container['additionalData'] = $additionalData;

        return $this;
    }

    /**
     * Gets locktime
     *
     * @return int
     */
    public function getLocktime()
    {
        return $this->container['locktime'];
    }

    /**
     * Sets locktime
     *
     * @param int $locktime Represents the time at which a particular transaction can be added to the blockchain.
     *
     * @return self
     */
    public function setLocktime($locktime)
    {
        if (is_null($locktime)) {
            throw new \InvalidArgumentException('non-nullable locktime cannot be null');
        }
        $this->container['locktime'] = $locktime;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Represents the total size of this transaction.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Representation of the transaction's version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFee
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFee $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets feePerByte
     *
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFeePerByte
     */
    public function getFeePerByte()
    {
        return $this->container['feePerByte'];
    }

    /**
     * Sets feePerByte
     *
     * @param \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIFeePerByte $feePerByte feePerByte
     *
     * @return self
     */
    public function setFeePerByte($feePerByte)
    {
        if (is_null($feePerByte)) {
            throw new \InvalidArgumentException('non-nullable feePerByte cannot be null');
        }
        $this->container['feePerByte'] = $feePerByte;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIInputsInner[]
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIInputsInner[] $inputs Represents the transaction inputs.
     *
     * @return self
     */
    public function setInputs($inputs)
    {
        if (is_null($inputs)) {
            throw new \InvalidArgumentException('non-nullable inputs cannot be null');
        }
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets outputs
     *
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIOutputsInner[]
     */
    public function getOutputs()
    {
        return $this->container['outputs'];
    }

    /**
     * Sets outputs
     *
     * @param \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIOutputsInner[] $outputs Represents the transaction outputs.
     *
     * @return self
     */
    public function setOutputs($outputs)
    {
        if (is_null($outputs)) {
            throw new \InvalidArgumentException('non-nullable outputs cannot be null');
        }
        $this->container['outputs'] = $outputs;

        return $this;
    }

    /**
     * Gets blockchainSpecific
     *
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS|null
     */
    public function getBlockchainSpecific()
    {
        return $this->container['blockchainSpecific'];
    }

    /**
     * Sets blockchainSpecific
     *
     * @param \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS|null $blockchainSpecific blockchainSpecific
     *
     * @return self
     */
    public function setBlockchainSpecific($blockchainSpecific)
    {
        if (is_null($blockchainSpecific)) {
            throw new \InvalidArgumentException('non-nullable blockchainSpecific cannot be null');
        }
        $this->container['blockchainSpecific'] = $blockchainSpecific;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


