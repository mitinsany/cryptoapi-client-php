<?php
/**
 * ListLatestMinedBlocksEVMRI
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Model;

use \ArrayAccess;
use \CryptoapisApiClient\ObjectSerializer;

/**
 * ListLatestMinedBlocksEVMRI Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListLatestMinedBlocksEVMRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListLatestMinedBlocksEVMRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'size' => 'int',
        'extraData' => 'string',
        'gasLimit' => 'int',
        'gasUsed' => 'int',
        'hash' => 'string',
        'height' => 'int',
        'minedInSeconds' => 'int',
        'nonce' => 'int',
        'previousBlockHash' => 'string',
        'timestamp' => 'int',
        'totalDifficulty' => 'int',
        'transactionsCount' => 'int',
        'blockchainSpecific' => '\CryptoapisApiClient\Model\ListLatestMinedBlocksEVMRIBST'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'size' => null,
        'extraData' => null,
        'gasLimit' => null,
        'gasUsed' => null,
        'hash' => null,
        'height' => null,
        'minedInSeconds' => null,
        'nonce' => null,
        'previousBlockHash' => null,
        'timestamp' => null,
        'totalDifficulty' => null,
        'transactionsCount' => null,
        'blockchainSpecific' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'size' => false,
        'extraData' => false,
        'gasLimit' => false,
        'gasUsed' => false,
        'hash' => false,
        'height' => false,
        'minedInSeconds' => false,
        'nonce' => false,
        'previousBlockHash' => false,
        'timestamp' => false,
        'totalDifficulty' => false,
        'transactionsCount' => false,
        'blockchainSpecific' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'size' => 'size',
        'extraData' => 'extraData',
        'gasLimit' => 'gasLimit',
        'gasUsed' => 'gasUsed',
        'hash' => 'hash',
        'height' => 'height',
        'minedInSeconds' => 'minedInSeconds',
        'nonce' => 'nonce',
        'previousBlockHash' => 'previousBlockHash',
        'timestamp' => 'timestamp',
        'totalDifficulty' => 'totalDifficulty',
        'transactionsCount' => 'transactionsCount',
        'blockchainSpecific' => 'blockchainSpecific'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'size' => 'setSize',
        'extraData' => 'setExtraData',
        'gasLimit' => 'setGasLimit',
        'gasUsed' => 'setGasUsed',
        'hash' => 'setHash',
        'height' => 'setHeight',
        'minedInSeconds' => 'setMinedInSeconds',
        'nonce' => 'setNonce',
        'previousBlockHash' => 'setPreviousBlockHash',
        'timestamp' => 'setTimestamp',
        'totalDifficulty' => 'setTotalDifficulty',
        'transactionsCount' => 'setTransactionsCount',
        'blockchainSpecific' => 'setBlockchainSpecific'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'size' => 'getSize',
        'extraData' => 'getExtraData',
        'gasLimit' => 'getGasLimit',
        'gasUsed' => 'getGasUsed',
        'hash' => 'getHash',
        'height' => 'getHeight',
        'minedInSeconds' => 'getMinedInSeconds',
        'nonce' => 'getNonce',
        'previousBlockHash' => 'getPreviousBlockHash',
        'timestamp' => 'getTimestamp',
        'totalDifficulty' => 'getTotalDifficulty',
        'transactionsCount' => 'getTransactionsCount',
        'blockchainSpecific' => 'getBlockchainSpecific'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('extraData', $data ?? [], null);
        $this->setIfExists('gasLimit', $data ?? [], null);
        $this->setIfExists('gasUsed', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('minedInSeconds', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('previousBlockHash', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('totalDifficulty', $data ?? [], null);
        $this->setIfExists('transactionsCount', $data ?? [], null);
        $this->setIfExists('blockchainSpecific', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['extraData'] === null) {
            $invalidProperties[] = "'extraData' can't be null";
        }
        if ($this->container['gasLimit'] === null) {
            $invalidProperties[] = "'gasLimit' can't be null";
        }
        if ($this->container['gasUsed'] === null) {
            $invalidProperties[] = "'gasUsed' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['minedInSeconds'] === null) {
            $invalidProperties[] = "'minedInSeconds' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ($this->container['previousBlockHash'] === null) {
            $invalidProperties[] = "'previousBlockHash' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['totalDifficulty'] === null) {
            $invalidProperties[] = "'totalDifficulty' can't be null";
        }
        if ($this->container['transactionsCount'] === null) {
            $invalidProperties[] = "'transactionsCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Numeric representation of the block size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets extraData
     *
     * @return string
     */
    public function getExtraData()
    {
        return $this->container['extraData'];
    }

    /**
     * Sets extraData
     *
     * @param string $extraData Represents any data that can be included by the miner in the block.
     *
     * @return self
     */
    public function setExtraData($extraData)
    {
        if (is_null($extraData)) {
            throw new \InvalidArgumentException('non-nullable extraData cannot be null');
        }
        $this->container['extraData'] = $extraData;

        return $this;
    }

    /**
     * Gets gasLimit
     *
     * @return int
     */
    public function getGasLimit()
    {
        return $this->container['gasLimit'];
    }

    /**
     * Sets gasLimit
     *
     * @param int $gasLimit Defines the total gas limit of all transactions in the block.
     *
     * @return self
     */
    public function setGasLimit($gasLimit)
    {
        if (is_null($gasLimit)) {
            throw new \InvalidArgumentException('non-nullable gasLimit cannot be null');
        }
        $this->container['gasLimit'] = $gasLimit;

        return $this;
    }

    /**
     * Gets gasUsed
     *
     * @return int
     */
    public function getGasUsed()
    {
        return $this->container['gasUsed'];
    }

    /**
     * Sets gasUsed
     *
     * @param int $gasUsed Represents the total amount of gas used by all transactions in this block.
     *
     * @return self
     */
    public function setGasUsed($gasUsed)
    {
        if (is_null($gasUsed)) {
            throw new \InvalidArgumentException('non-nullable gasUsed cannot be null');
        }
        $this->container['gasUsed'] = $gasUsed;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash Represents the same as transactionId for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols hash is different from transactionId for SegWit transactions.
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets minedInSeconds
     *
     * @return int
     */
    public function getMinedInSeconds()
    {
        return $this->container['minedInSeconds'];
    }

    /**
     * Sets minedInSeconds
     *
     * @param int $minedInSeconds Specifies the amount of time required for the block to be mined in second
     *
     * @return self
     */
    public function setMinedInSeconds($minedInSeconds)
    {
        if (is_null($minedInSeconds)) {
            throw new \InvalidArgumentException('non-nullable minedInSeconds cannot be null');
        }
        $this->container['minedInSeconds'] = $minedInSeconds;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return int
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param int $nonce Represents a random value that can be adjusted to satisfy the proof of work
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets previousBlockHash
     *
     * @return string
     */
    public function getPreviousBlockHash()
    {
        return $this->container['previousBlockHash'];
    }

    /**
     * Sets previousBlockHash
     *
     * @param string $previousBlockHash Represents the hash of the previous block, also known as the parent block.
     *
     * @return self
     */
    public function setPreviousBlockHash($previousBlockHash)
    {
        if (is_null($previousBlockHash)) {
            throw new \InvalidArgumentException('non-nullable previousBlockHash cannot be null');
        }
        $this->container['previousBlockHash'] = $previousBlockHash;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp Defines the exact date/time when this block was mined in Unix Timestamp.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets totalDifficulty
     *
     * @return int
     */
    public function getTotalDifficulty()
    {
        return $this->container['totalDifficulty'];
    }

    /**
     * Sets totalDifficulty
     *
     * @param int $totalDifficulty Defines the total difficulty of the chain until this block, i.e. how difficult it is for a specific miner to mine a new block
     *
     * @return self
     */
    public function setTotalDifficulty($totalDifficulty)
    {
        if (is_null($totalDifficulty)) {
            throw new \InvalidArgumentException('non-nullable totalDifficulty cannot be null');
        }
        $this->container['totalDifficulty'] = $totalDifficulty;

        return $this;
    }

    /**
     * Gets transactionsCount
     *
     * @return int
     */
    public function getTransactionsCount()
    {
        return $this->container['transactionsCount'];
    }

    /**
     * Sets transactionsCount
     *
     * @param int $transactionsCount Represents the total number of all transactions as part of this block.
     *
     * @return self
     */
    public function setTransactionsCount($transactionsCount)
    {
        if (is_null($transactionsCount)) {
            throw new \InvalidArgumentException('non-nullable transactionsCount cannot be null');
        }
        $this->container['transactionsCount'] = $transactionsCount;

        return $this;
    }

    /**
     * Gets blockchainSpecific
     *
     * @return \CryptoapisApiClient\Model\ListLatestMinedBlocksEVMRIBST|null
     */
    public function getBlockchainSpecific()
    {
        return $this->container['blockchainSpecific'];
    }

    /**
     * Sets blockchainSpecific
     *
     * @param \CryptoapisApiClient\Model\ListLatestMinedBlocksEVMRIBST|null $blockchainSpecific blockchainSpecific
     *
     * @return self
     */
    public function setBlockchainSpecific($blockchainSpecific)
    {
        if (is_null($blockchainSpecific)) {
            throw new \InvalidArgumentException('non-nullable blockchainSpecific cannot be null');
        }
        $this->container['blockchainSpecific'] = $blockchainSpecific;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


