<?php
/**
 * ListBlockchainEventsSubscriptionsRI
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Model;

use \ArrayAccess;
use \CryptoapisApiClient\ObjectSerializer;

/**
 * ListBlockchainEventsSubscriptionsRI Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListBlockchainEventsSubscriptionsRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListBlockchainEventsSubscriptionsRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'callbackSecretKey' => 'string',
        'callbackUrl' => 'string',
        'confirmationsCount' => 'int',
        'createdTimestamp' => 'int',
        'deactivationReasons' => '\CryptoapisApiClient\Model\ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner[]',
        'eventType' => 'string',
        'isActive' => 'bool',
        'referenceId' => 'string',
        'transactionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'callbackSecretKey' => null,
        'callbackUrl' => null,
        'confirmationsCount' => null,
        'createdTimestamp' => null,
        'deactivationReasons' => null,
        'eventType' => null,
        'isActive' => null,
        'referenceId' => null,
        'transactionId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'callbackSecretKey' => false,
        'callbackUrl' => false,
        'confirmationsCount' => false,
        'createdTimestamp' => false,
        'deactivationReasons' => false,
        'eventType' => false,
        'isActive' => false,
        'referenceId' => false,
        'transactionId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'callbackSecretKey' => 'callbackSecretKey',
        'callbackUrl' => 'callbackUrl',
        'confirmationsCount' => 'confirmationsCount',
        'createdTimestamp' => 'createdTimestamp',
        'deactivationReasons' => 'deactivationReasons',
        'eventType' => 'eventType',
        'isActive' => 'isActive',
        'referenceId' => 'referenceId',
        'transactionId' => 'transactionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'callbackSecretKey' => 'setCallbackSecretKey',
        'callbackUrl' => 'setCallbackUrl',
        'confirmationsCount' => 'setConfirmationsCount',
        'createdTimestamp' => 'setCreatedTimestamp',
        'deactivationReasons' => 'setDeactivationReasons',
        'eventType' => 'setEventType',
        'isActive' => 'setIsActive',
        'referenceId' => 'setReferenceId',
        'transactionId' => 'setTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'callbackSecretKey' => 'getCallbackSecretKey',
        'callbackUrl' => 'getCallbackUrl',
        'confirmationsCount' => 'getConfirmationsCount',
        'createdTimestamp' => 'getCreatedTimestamp',
        'deactivationReasons' => 'getDeactivationReasons',
        'eventType' => 'getEventType',
        'isActive' => 'getIsActive',
        'referenceId' => 'getReferenceId',
        'transactionId' => 'getTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('callbackSecretKey', $data ?? [], null);
        $this->setIfExists('callbackUrl', $data ?? [], null);
        $this->setIfExists('confirmationsCount', $data ?? [], null);
        $this->setIfExists('createdTimestamp', $data ?? [], null);
        $this->setIfExists('deactivationReasons', $data ?? [], null);
        $this->setIfExists('eventType', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('referenceId', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['callbackUrl'] === null) {
            $invalidProperties[] = "'callbackUrl' can't be null";
        }
        if ($this->container['confirmationsCount'] === null) {
            $invalidProperties[] = "'confirmationsCount' can't be null";
        }
        if ($this->container['createdTimestamp'] === null) {
            $invalidProperties[] = "'createdTimestamp' can't be null";
        }
        if ($this->container['eventType'] === null) {
            $invalidProperties[] = "'eventType' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalidProperties[] = "'isActive' can't be null";
        }
        if ($this->container['referenceId'] === null) {
            $invalidProperties[] = "'referenceId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Represents the address of the transaction.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets callbackSecretKey
     *
     * @return string|null
     */
    public function getCallbackSecretKey()
    {
        return $this->container['callbackSecretKey'];
    }

    /**
     * Sets callbackSecretKey
     *
     * @param string|null $callbackSecretKey Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://project-2a14af.doxify.ai/v-1.2023-04-25-105/RESTapis/general-information/callbacks#callback-security).
     *
     * @return self
     */
    public function setCallbackSecretKey($callbackSecretKey)
    {
        if (is_null($callbackSecretKey)) {
            throw new \InvalidArgumentException('non-nullable callbackSecretKey cannot be null');
        }
        $this->container['callbackSecretKey'] = $callbackSecretKey;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string $callbackUrl Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.
     *
     * @return self
     */
    public function setCallbackUrl($callbackUrl)
    {
        if (is_null($callbackUrl)) {
            throw new \InvalidArgumentException('non-nullable callbackUrl cannot be null');
        }
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }

    /**
     * Gets confirmationsCount
     *
     * @return int
     */
    public function getConfirmationsCount()
    {
        return $this->container['confirmationsCount'];
    }

    /**
     * Sets confirmationsCount
     *
     * @param int $confirmationsCount Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.
     *
     * @return self
     */
    public function setConfirmationsCount($confirmationsCount)
    {
        if (is_null($confirmationsCount)) {
            throw new \InvalidArgumentException('non-nullable confirmationsCount cannot be null');
        }
        $this->container['confirmationsCount'] = $confirmationsCount;

        return $this;
    }

    /**
     * Gets createdTimestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['createdTimestamp'];
    }

    /**
     * Sets createdTimestamp
     *
     * @param int $createdTimestamp Defines the specific time/date when the subscription was created in Unix Timestamp.
     *
     * @return self
     */
    public function setCreatedTimestamp($createdTimestamp)
    {
        if (is_null($createdTimestamp)) {
            throw new \InvalidArgumentException('non-nullable createdTimestamp cannot be null');
        }
        $this->container['createdTimestamp'] = $createdTimestamp;

        return $this;
    }

    /**
     * Gets deactivationReasons
     *
     * @return \CryptoapisApiClient\Model\ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner[]|null
     */
    public function getDeactivationReasons()
    {
        return $this->container['deactivationReasons'];
    }

    /**
     * Sets deactivationReasons
     *
     * @param \CryptoapisApiClient\Model\ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner[]|null $deactivationReasons Represents the deactivation reason details, available when a blockchain event subscription has status isActive - false.
     *
     * @return self
     */
    public function setDeactivationReasons($deactivationReasons)
    {
        if (is_null($deactivationReasons)) {
            throw new \InvalidArgumentException('non-nullable deactivationReasons cannot be null');
        }
        $this->container['deactivationReasons'] = $deactivationReasons;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string $eventType Defines the type of the specific event available for the customer to subscribe to for callback notification.
     *
     * @return self
     */
    public function setEventType($eventType)
    {
        if (is_null($eventType)) {
            throw new \InvalidArgumentException('non-nullable eventType cannot be null');
        }
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive Defines whether the subscription is active or not. Set as boolean.
     *
     * @return self
     */
    public function setIsActive($isActive)
    {
        if (is_null($isActive)) {
            throw new \InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets referenceId
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['referenceId'];
    }

    /**
     * Sets referenceId
     *
     * @param string $referenceId Represents a unique ID used to reference the specific callback subscription.
     *
     * @return self
     */
    public function setReferenceId($referenceId)
    {
        if (is_null($referenceId)) {
            throw new \InvalidArgumentException('non-nullable referenceId cannot be null');
        }
        $this->container['referenceId'] = $referenceId;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param string|null $transactionId Represents the unique identification string that defines the transaction.
     *
     * @return self
     */
    public function setTransactionId($transactionId)
    {
        if (is_null($transactionId)) {
            throw new \InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


