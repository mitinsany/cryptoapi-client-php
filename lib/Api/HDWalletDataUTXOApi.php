<?php
/**
 * HDWalletDataUTXOApi
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use CryptoapisApiClient\ApiException;
use CryptoapisApiClient\Configuration;
use CryptoapisApiClient\FormDataProcessor;
use CryptoapisApiClient\HeaderSelector;
use CryptoapisApiClient\ObjectSerializer;

/**
 * HDWalletDataUTXOApi Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HDWalletDataUTXOApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deriveAndSyncNewChangeAddressesUTXO' => [
            'application/json',
        ],
        'deriveAndSyncNewReceivingAddressesUTXO' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubAssetsUTXO' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubDetailsUTXO' => [
            'application/json',
        ],
        'listHDWalletXPubYPubZPubTransactionsUTXO' => [
            'application/json',
        ],
        'listHDWalletXPubYPubZPubUTXOs' => [
            'application/json',
        ],
        'listSyncedAddressesUTXO' => [
            'application/json',
        ],
        'prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deriveAndSyncNewChangeAddressesUTXO
     *
     * Derive And Sync New Change Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXORB|null $deriveAndSyncNewChangeAddressesUTXORB deriveAndSyncNewChangeAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function deriveAndSyncNewChangeAddressesUTXO($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewChangeAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'][0])
    {
        list($response) = $this->deriveAndSyncNewChangeAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewChangeAddressesUTXORB, $contentType);
        return $response;
    }

    /**
     * Operation deriveAndSyncNewChangeAddressesUTXOWithHttpInfo
     *
     * Derive And Sync New Change Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXORB|null $deriveAndSyncNewChangeAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deriveAndSyncNewChangeAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewChangeAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'][0])
    {
        $request = $this->deriveAndSyncNewChangeAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewChangeAddressesUTXORB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deriveAndSyncNewChangeAddressesUTXOAsync
     *
     * Derive And Sync New Change Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXORB|null $deriveAndSyncNewChangeAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewChangeAddressesUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewChangeAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'][0])
    {
        return $this->deriveAndSyncNewChangeAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewChangeAddressesUTXORB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deriveAndSyncNewChangeAddressesUTXOAsyncWithHttpInfo
     *
     * Derive And Sync New Change Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXORB|null $deriveAndSyncNewChangeAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewChangeAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewChangeAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXOR';
        $request = $this->deriveAndSyncNewChangeAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewChangeAddressesUTXORB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deriveAndSyncNewChangeAddressesUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewChangeAddressesUTXORB|null $deriveAndSyncNewChangeAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deriveAndSyncNewChangeAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewChangeAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewChangeAddressesUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling deriveAndSyncNewChangeAddressesUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling deriveAndSyncNewChangeAddressesUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling deriveAndSyncNewChangeAddressesUTXO'
            );
        }




        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/addresses/derive-and-sync-change';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deriveAndSyncNewChangeAddressesUTXORB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deriveAndSyncNewChangeAddressesUTXORB));
            } else {
                $httpBody = $deriveAndSyncNewChangeAddressesUTXORB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesUTXO
     *
     * Derive And Sync New Receiving Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXORB|null $deriveAndSyncNewReceivingAddressesUTXORB deriveAndSyncNewReceivingAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function deriveAndSyncNewReceivingAddressesUTXO($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'][0])
    {
        list($response) = $this->deriveAndSyncNewReceivingAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesUTXORB, $contentType);
        return $response;
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesUTXOWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXORB|null $deriveAndSyncNewReceivingAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deriveAndSyncNewReceivingAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'][0])
    {
        $request = $this->deriveAndSyncNewReceivingAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesUTXORB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesUTXOAsync
     *
     * Derive And Sync New Receiving Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXORB|null $deriveAndSyncNewReceivingAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'][0])
    {
        return $this->deriveAndSyncNewReceivingAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesUTXORB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesUTXOAsyncWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXORB|null $deriveAndSyncNewReceivingAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXOR';
        $request = $this->deriveAndSyncNewReceivingAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesUTXORB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deriveAndSyncNewReceivingAddressesUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesUTXORB|null $deriveAndSyncNewReceivingAddressesUTXORB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deriveAndSyncNewReceivingAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesUTXORB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling deriveAndSyncNewReceivingAddressesUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling deriveAndSyncNewReceivingAddressesUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling deriveAndSyncNewReceivingAddressesUTXO'
            );
        }




        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/addresses/derive-and-sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deriveAndSyncNewReceivingAddressesUTXORB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deriveAndSyncNewReceivingAddressesUTXORB));
            } else {
                $httpBody = $deriveAndSyncNewReceivingAddressesUTXORB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsUTXO
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubAssetsUTXO($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubAssetsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsUTXOWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubAssetsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubAssetsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXO422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsUTXOAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'][0])
    {
        return $this->getHDWalletXPubYPubZPubAssetsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsUTXOAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsUTXOR';
        $request = $this->getHDWalletXPubYPubZPubAssetsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubAssetsUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubAssetsUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubAssetsUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubAssetsUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubAssetsUTXO'
            );
        }




        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsUTXO
     *
     * Get HD Wallet (xPub, yPub, zPub) Details UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubDetailsUTXO($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubDetailsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsUTXOWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubDetailsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubDetailsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXO422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsUTXOAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Details UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'][0])
    {
        return $this->getHDWalletXPubYPubZPubDetailsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsUTXOAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsUTXOR';
        $request = $this->getHDWalletXPubYPubZPubDetailsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubDetailsUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubDetailsUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubDetailsUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubDetailsUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubDetailsUTXO'
            );
        }




        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsUTXO
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions UTXO
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listHDWalletXPubYPubZPubTransactionsUTXO($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'][0])
    {
        list($response) = $this->listHDWalletXPubYPubZPubTransactionsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsUTXOWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions UTXO
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHDWalletXPubYPubZPubTransactionsUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'][0])
    {
        $request = $this->listHDWalletXPubYPubZPubTransactionsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXO422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsUTXOAsync
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions UTXO
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'][0])
    {
        return $this->listHDWalletXPubYPubZPubTransactionsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsUTXOAsyncWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions UTXO
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsUTXOR';
        $request = $this->listHDWalletXPubYPubZPubTransactionsUTXORequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHDWalletXPubYPubZPubTransactionsUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional, default to 'account')
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listHDWalletXPubYPubZPubTransactionsUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = 'account', $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listHDWalletXPubYPubZPubTransactionsUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listHDWalletXPubYPubZPubTransactionsUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listHDWalletXPubYPubZPubTransactionsUTXO'
            );
        }






        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHDWalletXPubYPubZPubUTXOs
     *
     * List HD Wallet (xPub, yPub, zPub) UTXOs
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubUTXOs'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listHDWalletXPubYPubZPubUTXOs($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubUTXOs'][0])
    {
        list($response) = $this->listHDWalletXPubYPubZPubUTXOsWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listHDWalletXPubYPubZPubUTXOsWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) UTXOs
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubUTXOs'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHDWalletXPubYPubZPubUTXOsWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubUTXOs'][0])
    {
        $request = $this->listHDWalletXPubYPubZPubUTXOsRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listHDWalletXPubYPubZPubUTXOsAsync
     *
     * List HD Wallet (xPub, yPub, zPub) UTXOs
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubUTXOs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubUTXOsAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubUTXOs'][0])
    {
        return $this->listHDWalletXPubYPubZPubUTXOsAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHDWalletXPubYPubZPubUTXOsAsyncWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) UTXOs
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubUTXOs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubUTXOsAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubUTXOs'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubUTXOsR';
        $request = $this->listHDWalletXPubYPubZPubUTXOsRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHDWalletXPubYPubZPubUTXOs'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubUTXOs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listHDWalletXPubYPubZPubUTXOsRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubUTXOs'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listHDWalletXPubYPubZPubUTXOs'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listHDWalletXPubYPubZPubUTXOs'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listHDWalletXPubYPubZPubUTXOs'
            );
        }






        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/unspent-outputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSyncedAddressesUTXO
     *
     * List Synced Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot; (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListSyncedAddressesUTXOR|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO400Response|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listSyncedAddressesUTXO($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesUTXO'][0])
    {
        list($response) = $this->listSyncedAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listSyncedAddressesUTXOWithHttpInfo
     *
     * List Synced Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot; (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListSyncedAddressesUTXOR|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO400Response|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressesUTXO403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSyncedAddressesUTXOWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesUTXO'][0])
    {
        $request = $this->listSyncedAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXOR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListSyncedAddressesUTXOR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXOR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesUTXO403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSyncedAddressesUTXOAsync
     *
     * List Synced Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot; (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesUTXOAsync($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesUTXO'][0])
    {
        return $this->listSyncedAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSyncedAddressesUTXOAsyncWithHttpInfo
     *
     * List Synced Addresses UTXO
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot; (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesUTXOAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesUTXO'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListSyncedAddressesUTXOR';
        $request = $this->listSyncedAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSyncedAddressesUTXO'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot; (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional, default to true)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesUTXO'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSyncedAddressesUTXORequest($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = true, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesUTXO'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listSyncedAddressesUTXO'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listSyncedAddressesUTXO'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listSyncedAddressesUTXO'
            );
        }







        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $addressFormat,
            'addressFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isChangeAddress,
            'isChangeAddress', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub
     *
     * Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB|null $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub400Response|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub($blockchain, $network, $extendedPublicKey, $context = null, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null, string $contentType = self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'][0])
    {
        list($response) = $this->prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo($blockchain, $network, $extendedPublicKey, $context, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB, $contentType);
        return $response;
    }

    /**
     * Operation prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo
     *
     * Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB|null $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub400Response|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubWithHttpInfo($blockchain, $network, $extendedPublicKey, $context = null, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null, string $contentType = self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'][0])
    {
        $request = $this->prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRequest($blockchain, $network, $extendedPublicKey, $context, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsync
     *
     * Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB|null $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsync($blockchain, $network, $extendedPublicKey, $context = null, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null, string $contentType = self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'][0])
    {
        return $this->prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsyncWithHttpInfo($blockchain, $network, $extendedPublicKey, $context, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsyncWithHttpInfo
     *
     * Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB|null $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubAsyncWithHttpInfo($blockchain, $network, $extendedPublicKey, $context = null, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null, string $contentType = self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR';
        $request = $this->prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRequest($blockchain, $network, $extendedPublicKey, $context, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while network like \&quot;testnet\&quot; is a test network. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB|null $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRequest($blockchain, $network, $extendedPublicKey, $context = null, $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null, string $contentType = self::contentTypes['prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub'
            );
        }




        $resourcePath = '/hd-wallets/utxo/{blockchain}/{network}/{extendedPublicKey}/transactions/prepare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB));
            } else {
                $httpBody = $prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
