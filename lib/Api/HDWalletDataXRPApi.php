<?php
/**
 * HDWalletDataXRPApi
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use CryptoapisApiClient\ApiException;
use CryptoapisApiClient\Configuration;
use CryptoapisApiClient\FormDataProcessor;
use CryptoapisApiClient\HeaderSelector;
use CryptoapisApiClient\ObjectSerializer;

/**
 * HDWalletDataXRPApi Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HDWalletDataXRPApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deriveAndSyncNewReceivingAddressesXRP' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubAssetsXRP' => [
            'application/json',
        ],
        'getHDWalletXPubYPubZPubDetailsXRP' => [
            'application/json',
        ],
        'listHDWalletXPubYPubZPubTransactionsXRP' => [
            'application/json',
        ],
        'listSyncedAddressesXRP' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesXRP
     *
     * Derive And Sync New Receiving Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPRB|null $deriveAndSyncNewReceivingAddressesXRPRB deriveAndSyncNewReceivingAddressesXRPRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function deriveAndSyncNewReceivingAddressesXRP($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesXRPRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'][0])
    {
        list($response) = $this->deriveAndSyncNewReceivingAddressesXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesXRPRB, $contentType);
        return $response;
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesXRPWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPRB|null $deriveAndSyncNewReceivingAddressesXRPRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP400Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deriveAndSyncNewReceivingAddressesXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesXRPRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'][0])
    {
        $request = $this->deriveAndSyncNewReceivingAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesXRPRB, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRP403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesXRPAsync
     *
     * Derive And Sync New Receiving Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPRB|null $deriveAndSyncNewReceivingAddressesXRPRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesXRPAsync($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesXRPRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'][0])
    {
        return $this->deriveAndSyncNewReceivingAddressesXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesXRPRB, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deriveAndSyncNewReceivingAddressesXRPAsyncWithHttpInfo
     *
     * Derive And Sync New Receiving Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPRB|null $deriveAndSyncNewReceivingAddressesXRPRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deriveAndSyncNewReceivingAddressesXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesXRPRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPR';
        $request = $this->deriveAndSyncNewReceivingAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context, $deriveAndSyncNewReceivingAddressesXRPRB, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deriveAndSyncNewReceivingAddressesXRP'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \CryptoapisApiClient\Model\DeriveAndSyncNewReceivingAddressesXRPRB|null $deriveAndSyncNewReceivingAddressesXRPRB (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deriveAndSyncNewReceivingAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context = null, $deriveAndSyncNewReceivingAddressesXRPRB = null, string $contentType = self::contentTypes['deriveAndSyncNewReceivingAddressesXRP'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling deriveAndSyncNewReceivingAddressesXRP'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling deriveAndSyncNewReceivingAddressesXRP'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling deriveAndSyncNewReceivingAddressesXRP'
            );
        }




        $resourcePath = '/hd-wallets/{blockchain}/{network}/{extendedPublicKey}/addresses/derive-and-sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deriveAndSyncNewReceivingAddressesXRPRB)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deriveAndSyncNewReceivingAddressesXRPRB));
            } else {
                $httpBody = $deriveAndSyncNewReceivingAddressesXRPRB;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsXRP
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubAssetsXRP($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubAssetsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsXRPWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubAssetsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubAssetsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRP422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsXRPAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsXRPAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'][0])
    {
        return $this->getHDWalletXPubYPubZPubAssetsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubAssetsXRPAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Assets XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubAssetsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubAssetsXRPR';
        $request = $this->getHDWalletXPubYPubZPubAssetsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubAssetsXRP'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubAssetsXRPRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubAssetsXRP'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubAssetsXRP'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubAssetsXRP'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubAssetsXRP'
            );
        }




        $resourcePath = '/hd-wallets/{blockchain}/{network}/{extendedPublicKey}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsXRP
     *
     * Get HD Wallet (xPub, yPub, zPub) Details XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getHDWalletXPubYPubZPubDetailsXRP($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'][0])
    {
        list($response) = $this->getHDWalletXPubYPubZPubDetailsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);
        return $response;
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsXRPWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP400Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHDWalletXPubYPubZPubDetailsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'][0])
    {
        $request = $this->getHDWalletXPubYPubZPubDetailsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRP422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsXRPAsync
     *
     * Get HD Wallet (xPub, yPub, zPub) Details XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsXRPAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'][0])
    {
        return $this->getHDWalletXPubYPubZPubDetailsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHDWalletXPubYPubZPubDetailsXRPAsyncWithHttpInfo
     *
     * Get HD Wallet (xPub, yPub, zPub) Details XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHDWalletXPubYPubZPubDetailsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\GetHDWalletXPubYPubZPubDetailsXRPR';
        $request = $this->getHDWalletXPubYPubZPubDetailsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHDWalletXPubYPubZPubDetailsXRP'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHDWalletXPubYPubZPubDetailsXRPRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, string $contentType = self::contentTypes['getHDWalletXPubYPubZPubDetailsXRP'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getHDWalletXPubYPubZPubDetailsXRP'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling getHDWalletXPubYPubZPubDetailsXRP'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getHDWalletXPubYPubZPubDetailsXRP'
            );
        }




        $resourcePath = '/hd-wallets/{blockchain}/{network}/{extendedPublicKey}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsXRP
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions XRP
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listHDWalletXPubYPubZPubTransactionsXRP($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'][0])
    {
        list($response) = $this->listHDWalletXPubYPubZPubTransactionsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsXRPWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions XRP
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP400Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHDWalletXPubYPubZPubTransactionsXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'][0])
    {
        $request = $this->listHDWalletXPubYPubZPubTransactionsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRP422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsXRPAsync
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions XRP
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsXRPAsync($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'][0])
    {
        return $this->listHDWalletXPubYPubZPubTransactionsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHDWalletXPubYPubZPubTransactionsXRPAsyncWithHttpInfo
     *
     * List HD Wallet (xPub, yPub, zPub) Transactions XRP
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHDWalletXPubYPubZPubTransactionsXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListHDWalletXPubYPubZPubTransactionsXRPR';
        $request = $this->listHDWalletXPubYPubZPubTransactionsXRPRequest($blockchain, $extendedPublicKey, $network, $context, $derivation, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHDWalletXPubYPubZPubTransactionsXRP'
     *
     * @param  string $blockchain Represents the specific blockchain. (required)
     * @param  string $extendedPublicKey Defines the master public key (xPub) of the account. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; is a test network. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $derivation The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listHDWalletXPubYPubZPubTransactionsXRPRequest($blockchain, $extendedPublicKey, $network, $context = null, $derivation = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listHDWalletXPubYPubZPubTransactionsXRP'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listHDWalletXPubYPubZPubTransactionsXRP'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listHDWalletXPubYPubZPubTransactionsXRP'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listHDWalletXPubYPubZPubTransactionsXRP'
            );
        }






        $resourcePath = '/hd-wallets/{blockchain}/{network}/{extendedPublicKey}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $derivation,
            'derivation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSyncedAddressesXRP
     *
     * List Synced Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListSyncedAddressesXRPR|\CryptoapisApiClient\Model\ListSyncedAddressesXRP400Response|\CryptoapisApiClient\Model\ListSyncedAddressesXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressesXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listSyncedAddressesXRP($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesXRP'][0])
    {
        list($response) = $this->listSyncedAddressesXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listSyncedAddressesXRPWithHttpInfo
     *
     * List Synced Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesXRP'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListSyncedAddressesXRPR|\CryptoapisApiClient\Model\ListSyncedAddressesXRP400Response|\CryptoapisApiClient\Model\ListSyncedAddressesXRP401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressesXRP403Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSyncedAddressesXRPWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesXRP'][0])
    {
        $request = $this->listSyncedAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRPR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP403Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListSyncedAddressesXRPR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRPR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressesXRP403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSyncedAddressesXRPAsync
     *
     * List Synced Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesXRPAsync($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesXRP'][0])
    {
        return $this->listSyncedAddressesXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSyncedAddressesXRPAsyncWithHttpInfo
     *
     * List Synced Addresses XRP
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressesXRPAsyncWithHttpInfo($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesXRP'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListSyncedAddressesXRPR';
        $request = $this->listSyncedAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context, $addressFormat, $isChangeAddress, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSyncedAddressesXRP'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $extendedPublicKey Defines the account extended publicly known key which is used to derive all child public keys. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string|null $addressFormat Defines the address format value. (optional)
     * @param  bool|null $isChangeAddress Defines if the address is change addres or not. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  int|null $offset The starting index of the response items, i.e. where the response should start listing the returned items. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressesXRP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSyncedAddressesXRPRequest($blockchain, $extendedPublicKey, $network, $context = null, $addressFormat = null, $isChangeAddress = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['listSyncedAddressesXRP'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listSyncedAddressesXRP'
            );
        }

        // verify the required parameter 'extendedPublicKey' is set
        if ($extendedPublicKey === null || (is_array($extendedPublicKey) && count($extendedPublicKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extendedPublicKey when calling listSyncedAddressesXRP'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listSyncedAddressesXRP'
            );
        }







        $resourcePath = '/hd-wallets/{blockchain}/{network}/{extendedPublicKey}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $addressFormat,
            'addressFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isChangeAddress,
            'isChangeAddress', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($extendedPublicKey !== null) {
            $resourcePath = str_replace(
                '{' . 'extendedPublicKey' . '}',
                ObjectSerializer::toPathValue($extendedPublicKey),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
