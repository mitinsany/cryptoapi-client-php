<?php
/**
 * AddressHistoryEVMApi
 * PHP version 8.1
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2024-12-12
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CryptoapisApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use CryptoapisApiClient\ApiException;
use CryptoapisApiClient\Configuration;
use CryptoapisApiClient\FormDataProcessor;
use CryptoapisApiClient\HeaderSelector;
use CryptoapisApiClient\ObjectSerializer;

/**
 * AddressHistoryEVMApi Class Doc Comment
 *
 * @category Class
 * @package  CryptoapisApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddressHistoryEVMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getSyncedAddressTokensTransferEVM' => [
            'application/json',
        ],
        'listConfirmedTransactionsByAddressEVMHistory' => [
            'application/json',
        ],
        'listSyncedAddressInternalTransactionsEVM' => [
            'application/json',
        ],
        'listTokensByAddressSyncedEVM' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getSyncedAddressTokensTransferEVM
     *
     * Get Synced Address Tokens Transfer EVM
     *
     * @param  string $blockchain blockchain (required)
     * @param  string $network network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSyncedAddressTokensTransferEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM400Response|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function getSyncedAddressTokensTransferEVM($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['getSyncedAddressTokensTransferEVM'][0])
    {
        list($response) = $this->getSyncedAddressTokensTransferEVMWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);
        return $response;
    }

    /**
     * Operation getSyncedAddressTokensTransferEVMWithHttpInfo
     *
     * Get Synced Address Tokens Transfer EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSyncedAddressTokensTransferEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM400Response|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSyncedAddressTokensTransferEVMWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['getSyncedAddressTokensTransferEVM'][0])
    {
        $request = $this->getSyncedAddressTokensTransferEVMRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM403Response',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSyncedAddressTokensTransferEVMAsync
     *
     * Get Synced Address Tokens Transfer EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSyncedAddressTokensTransferEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSyncedAddressTokensTransferEVMAsync($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['getSyncedAddressTokensTransferEVM'][0])
    {
        return $this->getSyncedAddressTokensTransferEVMAsyncWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSyncedAddressTokensTransferEVMAsyncWithHttpInfo
     *
     * Get Synced Address Tokens Transfer EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSyncedAddressTokensTransferEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSyncedAddressTokensTransferEVMAsyncWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['getSyncedAddressTokensTransferEVM'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\GetSyncedAddressTokensTransferEVMR';
        $request = $this->getSyncedAddressTokensTransferEVMRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSyncedAddressTokensTransferEVM'
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSyncedAddressTokensTransferEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSyncedAddressTokensTransferEVMRequest($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['getSyncedAddressTokensTransferEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getSyncedAddressTokensTransferEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getSyncedAddressTokensTransferEVM'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling getSyncedAddressTokensTransferEVM'
            );
        }






        $resourcePath = '/addresses-historical/evm/{blockchain}/{network}/{address}/tokens-transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortingOrder,
            'sortingOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfter,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listConfirmedTransactionsByAddressEVMHistory
     *
     * List Confirmed Transactions By Address EVM history
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory400Response|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listConfirmedTransactionsByAddressEVMHistory($blockchain, $network, $address, $context = null, $limit = 10, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'][0])
    {
        list($response) = $this->listConfirmedTransactionsByAddressEVMHistoryWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);
        return $response;
    }

    /**
     * Operation listConfirmedTransactionsByAddressEVMHistoryWithHttpInfo
     *
     * List Confirmed Transactions By Address EVM history
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory400Response|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listConfirmedTransactionsByAddressEVMHistoryWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 10, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'][0])
    {
        $request = $this->listConfirmedTransactionsByAddressEVMHistoryRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory403Response',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistory403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listConfirmedTransactionsByAddressEVMHistoryAsync
     *
     * List Confirmed Transactions By Address EVM history
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConfirmedTransactionsByAddressEVMHistoryAsync($blockchain, $network, $address, $context = null, $limit = 10, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'][0])
    {
        return $this->listConfirmedTransactionsByAddressEVMHistoryAsyncWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listConfirmedTransactionsByAddressEVMHistoryAsyncWithHttpInfo
     *
     * List Confirmed Transactions By Address EVM history
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConfirmedTransactionsByAddressEVMHistoryAsyncWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 10, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListConfirmedTransactionsByAddressEVMHistoryR';
        $request = $this->listConfirmedTransactionsByAddressEVMHistoryRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listConfirmedTransactionsByAddressEVMHistory'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;sepolia\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 10)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listConfirmedTransactionsByAddressEVMHistoryRequest($blockchain, $network, $address, $context = null, $limit = 10, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listConfirmedTransactionsByAddressEVMHistory'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listConfirmedTransactionsByAddressEVMHistory'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listConfirmedTransactionsByAddressEVMHistory'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling listConfirmedTransactionsByAddressEVMHistory'
            );
        }






        $resourcePath = '/addresses-historical/evm/{blockchain}/{network}/{address}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortingOrder,
            'sortingOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfter,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSyncedAddressInternalTransactionsEVM
     *
     * List Synced Address Internal Transactions EVM
     *
     * @param  string $blockchain blockchain (required)
     * @param  string $network network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressInternalTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM400Response|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listSyncedAddressInternalTransactionsEVM($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listSyncedAddressInternalTransactionsEVM'][0])
    {
        list($response) = $this->listSyncedAddressInternalTransactionsEVMWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);
        return $response;
    }

    /**
     * Operation listSyncedAddressInternalTransactionsEVMWithHttpInfo
     *
     * List Synced Address Internal Transactions EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressInternalTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM400Response|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSyncedAddressInternalTransactionsEVMWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listSyncedAddressInternalTransactionsEVM'][0])
    {
        $request = $this->listSyncedAddressInternalTransactionsEVMRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM403Response',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSyncedAddressInternalTransactionsEVMAsync
     *
     * List Synced Address Internal Transactions EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressInternalTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressInternalTransactionsEVMAsync($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listSyncedAddressInternalTransactionsEVM'][0])
    {
        return $this->listSyncedAddressInternalTransactionsEVMAsyncWithHttpInfo($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSyncedAddressInternalTransactionsEVMAsyncWithHttpInfo
     *
     * List Synced Address Internal Transactions EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressInternalTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSyncedAddressInternalTransactionsEVMAsyncWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listSyncedAddressInternalTransactionsEVM'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListSyncedAddressInternalTransactionsEVMR';
        $request = $this->listSyncedAddressInternalTransactionsEVMRequest($blockchain, $network, $address, $context, $limit, $sortingOrder, $startingAfter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSyncedAddressInternalTransactionsEVM'
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address document represented in CryptoAPIs (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $sortingOrder Defines the sorting order of the results. DESCENDING or ASCENDING by timestamp (optional)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSyncedAddressInternalTransactionsEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSyncedAddressInternalTransactionsEVMRequest($blockchain, $network, $address, $context = null, $limit = 50, $sortingOrder = null, $startingAfter = null, string $contentType = self::contentTypes['listSyncedAddressInternalTransactionsEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listSyncedAddressInternalTransactionsEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listSyncedAddressInternalTransactionsEVM'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling listSyncedAddressInternalTransactionsEVM'
            );
        }






        $resourcePath = '/addresses-historical/evm/{blockchain}/{network}/{address}/internal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortingOrder,
            'sortingOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfter,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTokensByAddressSyncedEVM
     *
     * List Tokens By Address Synced EVM
     *
     * @param  string $blockchain blockchain (required)
     * @param  string $network network (required)
     * @param  string $address String identifier of the address (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTokensByAddressSyncedEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM400Response|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response
     */
    public function listTokensByAddressSyncedEVM($blockchain, $network, $address, $context = null, $limit = 50, $startingAfter = null, string $contentType = self::contentTypes['listTokensByAddressSyncedEVM'][0])
    {
        list($response) = $this->listTokensByAddressSyncedEVMWithHttpInfo($blockchain, $network, $address, $context, $limit, $startingAfter, $contentType);
        return $response;
    }

    /**
     * Operation listTokensByAddressSyncedEVMWithHttpInfo
     *
     * List Tokens By Address Synced EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTokensByAddressSyncedEVM'] to see the possible values for this operation
     *
     * @throws \CryptoapisApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM400Response|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM401Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response|\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM403Response|\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response|\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTokensByAddressSyncedEVMWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $startingAfter = null, string $contentType = self::contentTypes['listTokensByAddressSyncedEVM'][0])
    {
        $request = $this->listTokensByAddressSyncedEVMRequest($blockchain, $network, $address, $context, $limit, $startingAfter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM400Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM401Response',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM403Response',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVM403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetAddressBalanceUTXOs405Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CryptoapisApiClient\Model\GetBlockDetailsByBlockHashUTXOs500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTokensByAddressSyncedEVMAsync
     *
     * List Tokens By Address Synced EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTokensByAddressSyncedEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTokensByAddressSyncedEVMAsync($blockchain, $network, $address, $context = null, $limit = 50, $startingAfter = null, string $contentType = self::contentTypes['listTokensByAddressSyncedEVM'][0])
    {
        return $this->listTokensByAddressSyncedEVMAsyncWithHttpInfo($blockchain, $network, $address, $context, $limit, $startingAfter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTokensByAddressSyncedEVMAsyncWithHttpInfo
     *
     * List Tokens By Address Synced EVM
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTokensByAddressSyncedEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTokensByAddressSyncedEVMAsyncWithHttpInfo($blockchain, $network, $address, $context = null, $limit = 50, $startingAfter = null, string $contentType = self::contentTypes['listTokensByAddressSyncedEVM'][0])
    {
        $returnType = '\CryptoapisApiClient\Model\ListTokensByAddressSyncedEVMR';
        $request = $this->listTokensByAddressSyncedEVMRequest($blockchain, $network, $address, $context, $limit, $startingAfter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTokensByAddressSyncedEVM'
     *
     * @param  string $blockchain (required)
     * @param  string $network (required)
     * @param  string $address String identifier of the address (required)
     * @param  string|null $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  int|null $limit Defines how many items should be returned in the response per page basis. (optional, default to 50)
     * @param  string|null $startingAfter Defines the id of the previous listed record id from which the current list should start from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTokensByAddressSyncedEVM'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTokensByAddressSyncedEVMRequest($blockchain, $network, $address, $context = null, $limit = 50, $startingAfter = null, string $contentType = self::contentTypes['listTokensByAddressSyncedEVM'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling listTokensByAddressSyncedEVM'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling listTokensByAddressSyncedEVM'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling listTokensByAddressSyncedEVM'
            );
        }





        $resourcePath = '/addresses-historical/evm/{blockchain}/{network}/{address}/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfter,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
